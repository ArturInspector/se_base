"""
Business Rules - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞

NO AI - —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª–∞
"""
from typing import Dict, Any, Tuple
import logging

logger = logging.getLogger(__name__)


class BusinessRules:
    """–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    LEGAL_KEYWORDS_EXPLICIT = {
        '—é—Ä–ª–∏—Ü', '—é—Ä–∏–¥–∏—á–µ—Å–∫', '—Å—á–µ—Ç', '—Å—á—ë—Ç', '–¥–æ–≥–æ–≤–æ—Ä', 
        '–∏–Ω–Ω', '–æ–≥—Ä–Ω', '–æ–æ–æ', '–∑–∞–æ', '–∏–ø'
    }
    
    LEGAL_KEYWORDS_STRONG = {
        '–æ—Ñ–∏—Å', '–∫–æ–º–ø–∞–Ω–∏', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü', '—Ñ–∏—Ä–º', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç'
    }
    
    LEGAL_KEYWORDS_MODERATE = {
        '—Å–∫–ª–∞–¥', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤', '–∑–∞–≤–æ–¥', '—Ü–µ—Ö', '–º–∞–≥–∞–∑–∏–Ω',
        '—Ä–µ–≥—É–ª—è—Ä–Ω', '–ø–æ—Å—Ç–æ—è–Ω–Ω', '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω', '–±—Ä–∏–≥–∞–¥–∞'
    }
    
    LEGAL_KEYWORDS_WEAK = {
        '—Ñ—É—Ä–∞', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', '–ø–∞–ª–ª–µ—Ç', '–ø–∞—Ä—Ç–∏—è'
    }
    
    PRIVATE_KEYWORDS = {
        '–∫–≤–∞—Ä—Ç–∏—Ä', '–ø–µ—Ä–µ–µ–∑–¥', '–¥–∞—á–∞', '–¥–æ–º', '–º–µ–±–µ–ª—å', '–≤–µ—â–∏'
    }
    
    TACKLING_KEYWORDS = {
        '—Ç–∞–∫–µ–ª–∞–∂', '—Å–µ–π—Ñ', '–ø–∏–∞–Ω–∏–Ω–æ', '—Ä–æ—è–ª—å', '—Å—Ç–∞–Ω–æ–∫', '–±–∞–Ω–∫–æ–º–∞—Ç'
    }
    
    FORBIDDEN_KEYWORDS = {
        '—Ç—Ä—É–ø', '—É–º–µ—Ä—à', '–ø–æ–∫–æ–π–Ω', '–ø–æ—Ö–æ—Ä–æ–Ω', '–º–æ—Ä–≥',
        '–º–µ—Ä—Ç–≤', '—É—Å–æ–ø—à', '—Å–∫–æ–Ω—á–∞–ª', '–ø–æ–≥–∏–±', '—Ç–µ–ª–æ'
    }
    
    @staticmethod
    def detect_customer_type(extracted: Dict[str, Any]) -> Tuple[str, float]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: legal, private, unknown
        
        Returns:
            (customer_type, confidence)
        """
        keywords = set([k.lower() for k in extracted.get('keywords', [])])
        people = extracted.get('people')
        hours = extracted.get('hours')
        
        # –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —é—Ä–ª–∏—Ü–∞
        if keywords & BusinessRules.LEGAL_KEYWORDS_EXPLICIT:
            logger.info(f"‚úÖ Legal entity (explicit keywords): {keywords & BusinessRules.LEGAL_KEYWORDS_EXPLICIT}")
            return 'legal', 1.0
        
        # –°–∏–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —é—Ä–ª–∏—Ü–∞
        if keywords & BusinessRules.LEGAL_KEYWORDS_STRONG:
            logger.info(f"‚úÖ Legal entity (strong keywords): {keywords & BusinessRules.LEGAL_KEYWORDS_STRONG}")
            return 'legal', 0.9
        
        # –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º = —é—Ä–ª–∏—Ü–æ
        if people and people >= 8:
            logger.info(f"‚úÖ Legal entity (large order): {people} people")
            return 'legal', 0.8
        
        # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —é—Ä–ª–∏—Ü–∞
        if keywords & BusinessRules.LEGAL_KEYWORDS_MODERATE:
            if people and people >= 5:
                return 'legal', 0.8
            return 'legal', 0.6
        
        # –°–ª–∞–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —é—Ä–ª–∏—Ü–∞
        if keywords & BusinessRules.LEGAL_KEYWORDS_WEAK:
            if people and people >= 4:
                return 'legal', 0.7
            return 'unknown', 0.5
        
        # –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏–∑–ª–∏—Ü–∞
        if keywords & BusinessRules.PRIVATE_KEYWORDS:
            logger.info(f"‚úÖ Private customer: {keywords & BusinessRules.PRIVATE_KEYWORDS}")
            return 'private', 0.9
        
        # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–∫–∞–∑ = —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–∏–∑–ª–∏—Ü–æ
        if people and people <= 3:
            return 'private', 0.7
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        return 'unknown', 0.5
    
    @staticmethod
    def check_forbidden(extracted: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        
        Returns:
            (is_forbidden, reason)
        """
        keywords = set([k.lower() for k in extracted.get('keywords', [])])
        work_description = extracted.get('work_description', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ keywords
        if keywords & BusinessRules.FORBIDDEN_KEYWORDS:
            logger.warning(f"üö® FORBIDDEN request (keywords): {keywords & BusinessRules.FORBIDDEN_KEYWORDS}")
            return True, 'body_transport'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ work_description
        for forbidden_word in BusinessRules.FORBIDDEN_KEYWORDS:
            if forbidden_word in work_description:
                logger.warning(f"üö® FORBIDDEN request (description): '{forbidden_word}' in '{work_description}'")
                return True, 'body_transport'
        
        return False, ''
    
    @staticmethod
    def check_tackling(extracted: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–∫–µ–ª–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"""
        keywords = set([k.lower() for k in extracted.get('keywords', [])])
        
        if extracted.get('has_special_items'):
            return True
        
        if keywords & BusinessRules.TACKLING_KEYWORDS:
            logger.info(f"‚ö†Ô∏è Tackling work: {keywords & BusinessRules.TACKLING_KEYWORDS}")
            return True
        
        return False
    
    @staticmethod
    def validate_order_params(extracted: Dict[str, Any]) -> Dict[str, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞
        
        Returns:
            Dict —Å –æ—à–∏–±–∫–∞–º–∏ (–ø—É—Å—Ç–æ –µ—Å–ª–∏ –≤—Å–µ –æ–∫)
        """
        issues = {}
        
        people = extracted.get('people')
        hours = extracted.get('hours')
        
        # –ú–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞
        if people is not None and people < 2:
            issues['people'] = 'min_2_workers'
        
        # –ú–∞–∫—Å–∏–º—É–º 20 –≥—Ä—É–∑—á–∏–∫–æ–≤ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
        if people is not None and people > 20:
            issues['people'] = 'too_many_workers'
        
        # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
        if hours is not None and hours < 1:
            issues['hours'] = 'min_1_hour'
        
        # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
        if hours is not None and hours > 24:
            issues['hours'] = 'too_many_hours'
        
        return issues
    
    @staticmethod
    def check_floor_restriction(extracted: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–∂—É
        
        –ü—Ä–∞–≤–∏–ª–æ: —ç—Ç–∞–∂ > 3 –ë–ï–ó –ª–∏—Ñ—Ç–∞ - –û–¢–ö–ê–ó
        
        Returns:
            (is_restricted, reason)
        """
        floor = extracted.get('floor', 0)
        has_elevator = extracted.get('has_elevator', False)
        
        if floor > 3 and not has_elevator:
            logger.warning(f"üö´ Floor restriction: floor {floor} without elevator")
            return True, 'high_floor_no_elevator'
        
        return False, ''
    
    @staticmethod
    def check_heavy_item(extracted: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—è–∂–µ–ª—ã–π –ø—Ä–µ–¥–º–µ—Ç
        
        –ü—Ä–∞–≤–∏–ª–æ: –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç > 70 –∫–≥ - —Ç–∞–∫–µ–ª–∞–∂ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
        
        Returns:
            (is_tackling, reason)
        """
        single_item_weight = extracted.get('single_item_weight', 0)
        
        if single_item_weight > 70:
            logger.info(f"‚ö†Ô∏è Heavy item detected: {single_item_weight} kg - tackling required")
            return True, 'heavy_item_tackling'
        
        return False, ''
    
    @staticmethod
    def should_clarify_large_order(extracted: Dict[str, Any], customer_type: str) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —é—Ä–ª–∏—Ü–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if customer_type != 'unknown':
            return False
        
        people = extracted.get('people')
        hours = extracted.get('hours')
        
        if (people and people >= 5) or (hours and hours >= 6):
            logger.info(f"‚ö†Ô∏è Large order, need to clarify customer type: {people} people, {hours} hours")
            return True
        
        return False

