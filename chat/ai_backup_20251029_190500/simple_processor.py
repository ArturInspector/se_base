"""
Simple AI Processor V2 - –ú–∏–Ω–∏–º–∞–ª–∏–∑–º

–ü–†–ò–ù–¶–ò–ü: 
1 AI –≤—ã–∑–æ–≤ (–∏–∑–≤–ª–µ—á—å JSON —Å —Ñ–ª–∞–≥–∞–º–∏) ‚Üí if-else –ø–æ —Ñ–ª–∞–≥–∞–º ‚Üí –®–∞–±–ª–æ–Ω ‚Üí –û—Ç–≤–µ—Ç

NO BULLSHIT:
- –ù–µ—Ç Context Analyzer
- –ù–µ—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
- –ù–µ—Ç confidence –ø—Ä–æ–≤–µ—Ä–æ–∫
- –ù–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
"""
import json
import logging
import time
from typing import Dict, Any, Tuple

import openai

import sys
sys.path.insert(0, '/home/ludskoe/kwork/pepsiai/se_base')
from chats_log import api as chats_log
from db import Session

logger = logging.getLogger(__name__)

EXTRACTION_SCHEMA = {
    "type": "object",
    "properties": {
        "city": {"type": "string"},
        "people": {"type": "integer"},
        "hours": {"type": "number"},
        "phone": {"type": "string"},
        "floor": {"type": "integer"},
        "has_elevator": {"type": "boolean"},
        "single_item_weight": {"type": "integer"},
        
        # –§–õ–ê–ì–ò (AI –†–ï–®–ê–ï–¢!)
        "is_greeting": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è (–ø—Ä–∏–≤–µ—Ç, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å)"
        },
        "is_forbidden_service": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –õ–Æ–î–ï–ô (–¥–µ–¥–∞, —Å—Ç–∞—Ä–∏–∫–∞, –±–æ–ª—å–Ω–æ–≥–æ, –ø–æ–∫–æ–π–Ω–∏–∫–∞)"
        },
        "needs_tackling": {
            "type": "boolean", 
            "description": "TRUE –µ—Å–ª–∏ —Å–µ–π—Ñ/–ø–∏–∞–Ω–∏–Ω–æ/—Ä–æ—è–ª—å/—Å—Ç–∞–Ω–æ–∫/–±–∞–Ω–∫–æ–º–∞—Ç (–≤–µ—Å >70–∫–≥ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–º–µ—Ç)"
        },
        "is_legal_client": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ —é—Ä–ª–∏—Ü–æ: –æ—Ñ–∏—Å, —Å–∫–ª–∞–¥, –º–∞–≥–∞–∑–∏–Ω, –æ–≤–æ—â–µ–±–∞–∑–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ–º–ø–∞–Ω–∏—è, –¥–æ–≥–æ–≤–æ—Ä, —Å—á–µ—Ç, –ò–ù–ù, —é—Ä–ª–∏—Ü–æ, —Ç–µ—Ö.–∑–∞–¥–∞–Ω–∏–µ, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞–Ω–∫–∏, —Ç–µ—Ö–Ω–∏–∫–∞, —Å—Ç–µ–ª–ª–∞–∂–∏, —Ç–∞–∫–µ–ª–∞–∂, –∫—Ä–∞–Ω, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞, –±–æ–ª—å—à–æ–π —Ç–æ–Ω–Ω–∞–∂ (5 —Ç–æ–Ω–Ω, 10 —Ç–æ–Ω–Ω), —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –Ω–∞ –º–µ—Å—è—Ü, >4 –≥—Ä—É–∑—á–∏–∫–æ–≤"
        },
        "needs_transport": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –º–∞—à–∏–Ω—É/–≥–∞–∑–µ–ª—å/–∞–≤—Ç–æ/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ('–µ—Å—Ç—å –º–∞—à–∏–Ω–∞?', '–Ω—É–∂–Ω–∞ –≥–∞–∑–µ–ª—å')"
        },
        "has_question": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ —ç—Ç–æ –í–û–ü–†–û–° (–Ω–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö): –ø—Ä–æ —É—Å–ª—É–≥–∏, —É—Å–ª–æ–≤–∏—è, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, —É–ø–∞–∫–æ–≤–∫—É, –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ —Ç.–¥."
        }
    },
    "required": ["city", "people", "hours", "phone", "floor", "has_elevator", 
                 "single_item_weight", "is_greeting", "is_forbidden_service", "needs_tackling", 
                 "is_legal_client", "needs_transport", "has_question"],
    "additionalProperties": False
}

EXTRACTION_PROMPT = """–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª—É–∂–±—ã –≥—Ä—É–∑—á–∏–∫–æ–≤.

‚ö†Ô∏è –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π city/people/hours! –û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º–∏.

–§–õ–ê–ì–ò:
- is_greeting: TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è (–ø—Ä–∏–≤–µ—Ç, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å) –ë–ï–ó –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- is_forbidden_service: TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ß–ï–õ–û–í–ï–ö–ê (–¥–µ–¥–∞, —Å—Ç–∞—Ä–∏–∫–∞, –±–∞–±—É—à–∫—É, –±–æ–ª—å–Ω–æ–≥–æ, –ø–æ–∫–æ–π–Ω–∏–∫–∞, –∏–Ω–≤–∞–ª–∏–¥–∞)
- needs_tackling: TRUE –µ—Å–ª–∏ —Å–µ–π—Ñ/–ø–∏–∞–Ω–∏–Ω–æ/—Ä–æ—è–ª—å/—Å—Ç–∞–Ω–æ–∫/–±–∞–Ω–∫–æ–º–∞—Ç –ò–õ–ò –≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ >70–∫–≥
- is_legal_client: TRUE –µ—Å–ª–∏ —é—Ä–ª–∏—Ü–æ (–æ—Ñ–∏—Å, —Å–∫–ª–∞–¥, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ç–æ–Ω–Ω–∞–∂ 5+ —Ç–æ–Ω–Ω, –¥–æ–≥–æ–≤–æ—Ä, —Å—á–µ—Ç, —Ä–µ–≥—É–ª—è—Ä–Ω–æ, >4 –≥—Ä—É–∑—á–∏–∫–æ–≤)
- needs_transport: TRUE –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –º–∞—à–∏–Ω—É/–≥–∞–∑–µ–ª—å/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
- has_question: TRUE –µ—Å–ª–∏ –í–û–ü–†–û–° (–Ω–µ –¥–∞–Ω–Ω—ã–µ): –ø—Ä–æ —É—Å–ª—É–≥–∏, —É—Å–ª–æ–≤–∏—è, –≤—Ä–µ–º—è, —É–ø–∞–∫–æ–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" ‚Üí is_greeting: true, city: "", people: 0, hours: 0
"–ü—Ä–∏–≤–µ—Ç, –Ω—É–∂–Ω—ã 2 –≥—Ä—É–∑—á–∏–∫–∞" ‚Üí is_greeting: false (–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ!)
"–ù—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä–∏–∫–∞" ‚Üí is_forbidden_service: true
"–ü–æ–¥–Ω—è—Ç—å —Å–µ–π—Ñ" ‚Üí needs_tackling: true
"–ì—Ä—É–∑—á–∏–∫–∏ –¥–ª—è –æ—Ñ–∏—Å–∞, —Å—á–µ—Ç" ‚Üí is_legal_client: true
"–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 5 —Ç–æ–Ω–Ω" ‚Üí is_legal_client: true
"–ê –º–∞—à–∏–Ω–∞ –µ—Å—Ç—å?" ‚Üí needs_transport: true, has_question: true
"–†–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?" ‚Üí has_question: true
"""


AI_DISCLAIMER = "üí¨ –Ø AI-–±–æ—Ç SE Express. "

TEMPLATES = {
    "greeting": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä",
    
    "forbidden": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –ª—é–¥–µ–π. –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–µ–∑–¥–æ–º –∏–ª–∏ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏!",
    
    "floor_restriction": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ 3 —ç—Ç–∞–∂–∞ –±–µ–∑ –ª–∏—Ñ—Ç–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!",
    
    "tackling_ask_phone": "–î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
    
    "legal_ask_phone": "–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –º—ã –≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ —Å—á–µ—Ç–æ–º. –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
    
    "transport_ask_phone": "–ì–∞–∑–µ–ª—å: 2000‚ÇΩ/—á–∞—Å (–º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞) + –º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π.",
    
    "question_ask_phone": "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
    
    "city_not_found": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≥–æ—Ä–æ–¥–µ {city}. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
    
    "ask_city": "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤–∞–º –Ω—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏?",
    
    "ask_details": "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –≥—Ä—É–∑—á–∏–∫–æ–≤ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ {city}?",
    
    "show_price": "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {city}: {price}‚ÇΩ ({people} –≥—Ä—É–∑—á–∏–∫–æ–≤ √ó {hours}—á). –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑.",
    
    "deal_created": "–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
    
    "error": "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º."
}


class SimpleAIProcessor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: 1 AI –≤—ã–∑–æ–≤ ‚Üí if-else ‚Üí —à–∞–±–ª–æ–Ω"""
    
    def __init__(self):
        logger.info("SimpleAIProcessor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        self._init_openai()
        self._load_pricing()
        self.current_chat_id = None  # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ create_deal
    
    def _init_openai(self):
        import config
        try:
            self.openai_client = openai.OpenAI(
                api_key=config.Production.OPENAI_API_KEY,
                base_url=config.Production.OPENAI_BASE_URL
            )
            logger.info("‚úÖ OpenAI client ready")
        except Exception as e:
            logger.error(f"‚ùå OpenAI init failed: {e}")
            self.openai_client = None
    
    def _load_pricing(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–æ–≤ –∏–∑ JSON"""
        try:
            import os
            pricing_path = os.path.join(os.path.dirname(__file__), '../../clean_pricing_data.json')
            with open(pricing_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.pricing = data.get('cities', {})
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.pricing)} –≥–æ—Ä–æ–¥–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–æ–≤: {e}")
            self.pricing = {}
    
    def process(self, message: str, chat_id: str = None, ad_city: str = None, avito_message_model=None) -> str:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            ad_city: –ì–æ—Ä–æ–¥ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è AI)
            avito_message_model: –ú–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        start_time = time.time()
        self.current_chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è create_deal
        
        try:
            extracted = self._extract_data(message, chat_id, ad_city)
            response, action = self._apply_rules(extracted)
            
            # –î–æ–±–∞–≤–∏—Ç—å disclaimer –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            is_first_message = self._is_first_message(chat_id)
            if is_first_message:
                response = AI_DISCLAIMER + response
            
            response_time_ms = int((time.time() - start_time) * 1000)
            self._log(chat_id, message, response, extracted, action, response_time_ms, avito_message_model)
            
            logger.info(f"‚úÖ Response: {action} | City:{ad_city or 'N/A'} | First:{is_first_message} | {response_time_ms}ms")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return TEMPLATES["error"]
    
    def _is_first_message(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ?"""
        if not chat_id:
            return True
        
        try:
            with Session() as session:
                from chats_log.entities import ChatLog
                count = session.query(ChatLog).filter(
                    ChatLog.chat_id == chat_id,
                    ChatLog.is_success == True
                ).count()
                return count == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_first_message: {e}")
            return True
    
    def _extract_data(self, message: str, chat_id: str = None, ad_city: str = None) -> Dict[str, Any]:
        """
        AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí JSON —Å —Ñ–ª–∞–≥–∞–º–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            ad_city: –ì–æ—Ä–æ–¥ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
        """
        if not self.openai_client:
            return self._fallback_extract(message)
        
        try:
            context = []
            if chat_id:
                try:
                    history = chats_log.get_chat_history(chat_id, limit=3)
                    context = history[-3:] if history else []
                except Exception as e:
                    logger.error(f"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e}")
            
            # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≥–æ—Ä–æ–¥–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            extraction_prompt = EXTRACTION_PROMPT
            if ad_city:
                extraction_prompt += f"\n\nüèôÔ∏è –ü–û–î–°–ö–ê–ó–ö–ê: –ì–æ—Ä–æ–¥ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito = '{ad_city}'. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç."
            
            messages = context + [
                {"role": "system", "content": extraction_prompt},
                {"role": "user", "content": message}
            ]
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                response_format={
                    "type": "json_schema",
                    "json_schema": {
                        "name": "data_extraction",
                        "strict": True,
                        "schema": EXTRACTION_SCHEMA
                    }
                },
                temperature=0,
                max_tokens=300
            )
            
            extracted = json.loads(response.choices[0].message.content)
            logger.info(f"üìä Extracted: city={extracted['city']}, people={extracted['people']}, "
                       f"forbidden={extracted['is_forbidden_service']}, tackling={extracted['needs_tackling']}")
            
            return extracted
            
        except Exception as e:
            logger.error(f"‚ùå Extraction failed: {e}")
            return self._fallback_extract(message)
    
    def _fallback_extract(self, message: str) -> Dict:
        """Fallback –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω regex"""
        import re
        phone_match = re.search(r'(\+?7|8)?[\s\-]?\(?(\d{3})\)?[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})', message)
        phone = phone_match.group(0) if phone_match else ""
        
        return {
            "city": "",
            "people": 0,
            "hours": 0,
            "phone": phone,
            "floor": 0,
            "has_elevator": False,
            "single_item_weight": 0,
            "is_greeting": False,
            "is_forbidden_service": False,
            "needs_tackling": False,
            "is_legal_client": False,
            "needs_transport": False,
            "has_question": False,
            "_is_ai_unavailable": True  # –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ fallback
        }
    
    def _apply_rules(self, extracted: Dict) -> Tuple[str, str]:
        """
        IF-ELSE –ø–æ –§–õ–ê–ì–ê–ú (NO AI!)
        
        Returns:
            (response_text, action_name)
        """
        

        if extracted.get('_is_ai_unavailable'):
            if extracted.get('phone'):

                deal_id = self._create_deal(extracted, comment="‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
                return (f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", "ai_unavailable_with_phone")
                else:
                return ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", "ai_unavailable")
        
        # –ü–†–ò–í–ï–¢–°–¢–í–ò–ï (–µ—Å–ª–∏ is_greeting=True, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if extracted['is_greeting']:
            return (TEMPLATES["greeting"], "greeting")
        
        # –û–¢–°–ï–í #1: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        if extracted['is_forbidden_service']:
            return (TEMPLATES["forbidden"], "forbidden")
        
        # –û–¢–°–ï–í #2: –≠—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞
        if extracted['floor'] > 3 and not extracted['has_elevator']:
            return (TEMPLATES["floor_restriction"], "floor_restriction")
        
        # –û–¢–°–ï–í #3: –¢–∞–∫–µ–ª–∞–∂ –ò–õ–ò —é—Ä–ª–∏—Ü–æ –ò–õ–ò >5 —á–∞—Å–æ–≤
        if extracted['needs_tackling'] or extracted['is_legal_client'] or extracted['hours'] > 5:
            if not extracted['phone']:
                return (TEMPLATES["tackling_ask_phone"] if extracted['needs_tackling'] else TEMPLATES["legal_ask_phone"], 
                        "tackling_ask_phone" if extracted['needs_tackling'] else "legal_ask_phone")
            else:
                deal_id = self._create_deal_legal(extracted)
                return (TEMPLATES["deal_created"].format(deal_id=deal_id), "legal_deal_created")
        if extracted['needs_transport']:
            if not extracted['phone']:
                return (TEMPLATES["transport_ask_phone"], "transport_ask_phone")
            else:
                deal_id = self._create_deal(extracted, comment="–ù—É–∂–Ω–∞ –ì–∞–∑–µ–ª—å")
                return (TEMPLATES["deal_created"].format(deal_id=deal_id), "transport_deal_created")
        
        # –õ–Æ–ë–û–ô –î–†–£–ì–û–ô –í–û–ü–†–û–°
        if extracted['has_question']:
            if not extracted['phone']:
                return (TEMPLATES["question_ask_phone"], "question_ask_phone")
            else:
                deal_id = self._create_deal(extracted, comment="–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞")
                return (TEMPLATES["deal_created"].format(deal_id=deal_id), "question_deal_created")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #1: –ì–æ—Ä–æ–¥
        if not extracted['city']:
            return (TEMPLATES["ask_city"], "ask_city")
        
        # –ü–†–û–í–ï–†–ö–ê: –ì–æ—Ä–æ–¥ –≤ –±–∞–∑–µ
        if not self._city_in_database(extracted['city']):
            return (TEMPLATES["city_not_found"].format(city=extracted['city']), "city_not_found")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #2: –î–µ—Ç–∞–ª–∏
        if not extracted['people'] or not extracted['hours']:
            city = extracted['city']
            return (TEMPLATES["ask_details"].format(city=city), "ask_details")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #3: –¢–µ–ª–µ—Ñ–æ–Ω + –ø–æ–∫–∞–∑ —Ü–µ–Ω—ã
        if not extracted['phone']:
            price = self._calculate_price(extracted)
            return (
                TEMPLATES["show_price"].format(
                    city=extracted['city'],
                    price=price,
                    people=extracted['people'],
                    hours=extracted['hours']
                ),
                "show_price"
            )
        
        deal_id = self._create_deal(extracted)
        return (TEMPLATES["deal_created"].format(deal_id=deal_id), "deal_created")
    
    def _city_in_database(self, city: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ"""
        if not city:
            return False
        return city in self.pricing
    
    def _calculate_price(self, extracted: Dict) -> int:
        """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∏–∑ clean_pricing_data.json"""
        city = extracted['city']
        people = extracted['people']
        hours = extracted['hours']
        
        if city not in self.pricing:
            return 0
        
        city_pricing = self.pricing[city]
        ppr = city_pricing.get('ppr', 200)
        min_hours = city_pricing.get('min_hours', 4.0)
        
        hours_charged = max(float(hours), min_hours)
        
        return int(people * hours_charged * ppr)
    
    def _create_deal(self, extracted: Dict, comment: str = "") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å"""
        try:
            from chat.ai.function_handlers import handle_create_bitrix_deal
            
            summary_parts = []
            if extracted.get('city'):
                summary_parts.append(f"–ì–æ—Ä–æ–¥: {extracted['city']}")
            if extracted.get('people'):
                summary_parts.append(f"–ì—Ä—É–∑—á–∏–∫–∏: {extracted['people']}")
            if extracted.get('hours'):
                summary_parts.append(f"–ß–∞—Å—ã: {extracted['hours']}")
            if comment:
                summary_parts.append(comment)
            
            result = handle_create_bitrix_deal(
                arguments={
                    'phone': extracted['phone'],
                    'city': extracted.get('city', ''),
                    'hours': extracted.get('hours', 0),
                    'people': extracted.get('people', 0),
                    'summary': ' | '.join(summary_parts)
                },
                context={'chat_id': self.current_chat_id}
            )
            
            if result.get('success'):
                deal_id = result.get('deal_id', 'UNKNOWN')
                logger.info(f"‚úÖ Deal created: #{deal_id}")
                return str(deal_id)
            else:
                logger.error(f"‚ùå Deal creation failed: {result.get('error')}")
                return "ERROR"
                
        except Exception as e:
            logger.error(f"‚ùå Bitrix error: {e}")
            return "ERROR"
    
    def _create_deal_legal(self, extracted: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —é—Ä–ª–∏—Ü/—Ç–∞–∫–µ–ª–∞–∂–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å"""
        try:
            from chat.ai.function_handlers import handle_create_bitrix_deal_legal
            
            summary_parts = []
            if extracted.get('city'):
                summary_parts.append(f"–ì–æ—Ä–æ–¥: {extracted['city']}")
            if extracted.get('people'):
                summary_parts.append(f"–ì—Ä—É–∑—á–∏–∫–∏: {extracted['people']}")
            if extracted.get('hours'):
                summary_parts.append(f"–ß–∞—Å—ã: {extracted['hours']}")
            
            if extracted['is_legal_client']:
                summary_parts.append("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
            if extracted['needs_tackling']:
                summary_parts.append("–¢–∞–∫–µ–ª–∞–∂")
            if extracted.get('hours', 0) > 5:
                summary_parts.append(">5 —á–∞—Å–æ–≤")
            
            result = handle_create_bitrix_deal_legal(
                arguments={
                    'phone': extracted['phone'],
                    'city': extracted.get('city', ''),
                    'hours': extracted.get('hours', 0),
                    'people': extracted.get('people', 0),
                    'summary': ' | '.join(summary_parts)
                },
                context={'chat_id': self.current_chat_id}
            )
            
            if result.get('success'):
                deal_id = result.get('deal_id', 'UNKNOWN')
                logger.info(f"‚úÖ Legal deal created: #{deal_id}")
                return str(deal_id)
            else:
                logger.error(f"‚ùå Legal deal creation failed: {result.get('error')}")
                return "ERROR"
                
        except Exception as e:
            logger.error(f"‚ùå Bitrix error: {e}")
            return "ERROR"
    
    def _log(self, chat_id, message, response, extracted, action, response_time_ms, avito_message_model):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î"""
        if not avito_message_model:
            return
        
        try:
            chats_log.create_chat_log(
                model=avito_message_model,
                is_success=True,
                answer=response,
                comment=f"Action:{action} | Flags:forbidden={extracted['is_forbidden_service']},tackling={extracted['needs_tackling']}",
                extracted_data=extracted,
                response_time_ms=response_time_ms
            )
            logger.info(f"‚úÖ Logged: {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå Log failed: {e}")

