"""
Function Handlers –¥–ª—è OpenAI Function Calling

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–≥–¥–∞ AI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
–ö–∞–∂–¥—ã–π handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º.

"""
import json
import logging
from typing import Dict, Any, Optional
import traceback
import time
import recalls.bitrix
import utils
from .reliability import (
    retry_with_backoff,
    RetryConfig,
    get_circuit_breaker,
    CircuitBreakerOpenError,
    monitored_function,
    get_metrics
)

logger = logging.getLogger(__name__)


def _send_deal_failure_alert(phone: str, details: Any, error: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
    
    Fallback –∫–æ–≥–¥–∞ –ë–∏—Ç—Ä–∏–∫—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    """
    try:
        from bot import send_message
        
        alert_message = (
            f"üî¥ –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–î–ï–õ–ö–ò\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìã –î–µ—Ç–∞–ª–∏: {details}\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error}\n\n"
            f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!"
        )
        
        send_message(alert_message)
        logger.critical(f"[BITRIX_FAILURE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {phone}")
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å alert –≤ Telegram: {e}")
        # –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥
        logger.critical(f"[BITRIX_FAILURE] –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –î–µ—Ç–∞–ª–∏: {details}, –û—à–∏–±–∫–∞: {error}")


@monitored_function("create_bitrix_deal")
@retry_with_backoff(
    config=RetryConfig(max_attempts=3, initial_delay=1.0, max_delay=5.0),
    exceptions=(ConnectionError, TimeoutError, Exception)
)
def _create_bitrix_deal_with_retry(
    phone: str,
    username: str,
    source_description: str
) -> Any:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ —Å retry
    
    –í—ã–¥–µ–ª–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    """
    circuit_breaker = get_circuit_breaker("bitrix_api")
    
    try:
        result = circuit_breaker.call(
            recalls.bitrix.create_deal_from_avito,
            phone=phone,
            username=username,
            source_description=source_description
        )
        return result
    except CircuitBreakerOpenError as e:
        logger.error(f"Circuit breaker OPEN –¥–ª—è Bitrix API: {e}")
        raise ConnectionError("Bitrix API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def handle_create_bitrix_deal(arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
    
    Args:
        arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç AI (phone, city, hours, people, etc.)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (chat_id, user_id, ad_data)
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {"success": bool, "deal_id": int, "message": str}
    """
    try:

        
        phone = arguments.get("phone")
        if not phone:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "message": "–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            }
        
        normalized_phone = utils.telephone(phone)
        if not normalized_phone:
            return {
                "success": False,
                "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "message": f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            }
        
        city = arguments.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        hours = arguments.get("hours", "")
        people = arguments.get("people", "")
        work_type = arguments.get("work_type", "")
        summary = arguments.get("summary", "")
        
        source_parts = []
        if city:
            source_parts.append(f"–ì–æ—Ä–æ–¥: {city}")
        if hours:
            source_parts.append(f"–ß–∞—Å–æ–≤: {hours}")
        if people:
            source_parts.append(f"–ì—Ä—É–∑—á–∏–∫–æ–≤: {people}")
        if work_type:
            source_parts.append(f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}")
        if summary:
            source_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {summary}")
        
        source_description = " | ".join(source_parts) if source_parts else "Avito –∑–∞—è–≤–∫–∞"
        
        chat_id = context.get("chat_id") if context else None
        if chat_id:
            import chats_log
            try:
                dialogue_summary = chats_log.api.get_chat_summary(chat_id, max_messages=5)
                if dialogue_summary:
                    source_description = f"{source_description} | –ò—Å—Ç–æ—Ä–∏—è: {dialogue_summary}"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ: —Ç–µ–ª–µ—Ñ–æ–Ω={normalized_phone}, –æ–ø–∏—Å–∞–Ω–∏–µ={source_description[:100]}")
        
        try:
            deal_result = _create_bitrix_deal_with_retry(
                phone=normalized_phone,
                username="AvitoUser",
                source_description=source_description
            )
        except (ConnectionError, TimeoutError) as e:
            logger.error(f"Bitrix API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ retry: {e}")
            _send_deal_failure_alert(normalized_phone, source_description, f"API unavailable: {e}")
            return {
                "success": False,
                "error": "Bitrix API unavailable",
                "message": "–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
            }
        
        if deal_result:
            deal_id = deal_result if isinstance(deal_result, int) else "—Å–æ–∑–¥–∞–Ω–∞"
            logger.info(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {deal_id}")
            return {
                "success": True,
                "deal_id": deal_id,
                "phone": normalized_phone,
                "message": f"–°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            }
        else:
            logger.error("–ë–∏—Ç—Ä–∏–∫—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            _send_deal_failure_alert(normalized_phone, source_description, "Empty result from Bitrix")
            return {
                "success": False,
                "error": "Empty result from Bitrix",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ: {e}")
        logger.error(traceback.format_exc())
        _send_deal_failure_alert(
            phone=arguments.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω"),
            details=arguments,
            error=str(e)
        )
        return {
            "success": False,
            "error": str(e),
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏"
        }


@monitored_function("calculate_price_estimate")
def handle_calculate_price_estimate(arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    Args:
        arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç AI (city, hours, people)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ {"success": bool, "price_info": str}
    """
    try:
        from .pricing import PricingCalculator
        
        city = arguments.get("city")
        hours = arguments.get("hours")
        people = arguments.get("people")
        
        if not all([city, hours, people]):
            return {
                "success": False,
                "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞",
                "message": "–ù—É–∂–µ–Ω –≥–æ—Ä–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏ –≥—Ä—É–∑—á–∏–∫–æ–≤"
            }
        
        calculator = PricingCalculator()
        
        work_details = {
            "city": city,
            "hours": hours,
            "people": people
        }
        
        price_info = calculator.calculate_price(work_details)
        
        if price_info and price_info != "CITY_REQUEST":
            logger.info(f"–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {city}, {hours}—á, {people}—á–µ–ª = {price_info[:50]}")
            return {
                "success": True,
                "price_info": price_info,
                "message": price_info
            }
        else:
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "message": f"–ù–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "error": str(e),
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        }


# –ö—ç—à –¥–ª—è –ø—Ä–∞–π—Å–æ–≤ –≥–æ—Ä–æ–¥–æ–≤ (–≥–æ—Ä–æ–¥ -> –¥–∞–Ω–Ω—ã–µ, –≤—Ä–µ–º—è)
_city_pricing_cache = {}
_cache_ttl_seconds = 3600  # 1 —á–∞—Å


@monitored_function("get_city_pricing")
def handle_get_city_pricing(arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    
    Args:
        arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç AI (city)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
    Returns:
        Dict: –ü—Ä–∞–π—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ {"success": bool, "city": str, "ppr": int, ...}
    """
    try:
        from .pricing import PricingCalculator
        import cities.api
        
        city = arguments.get("city")
        if not city:
            return {
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥",
                "message": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if city in _city_pricing_cache:
            cached_data, cached_time = _city_pricing_cache[city]
            if (time.time() - cached_time) < _cache_ttl_seconds:
                logger.debug(f"–ü—Ä–∞–π—Å –¥–ª—è {city} –∏–∑ –∫—ç—à–∞")
                return cached_data
        
        calculator = PricingCalculator()
        city_pricing = calculator.get_city_pricing(city)
        
        if city_pricing:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∞–π—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: ppr={city_pricing.get('ppr')}")
            result = {
                "success": True,
                "city": city,
                "ppr": city_pricing.get("ppr"),
                "min_hours": city_pricing.get("min_hours", 2.0),
                "shift_8h": city_pricing.get("shift_8h"),
                "shift_12h": city_pricing.get("shift_12h"),
                "gazelle": city_pricing.get("gazelle", 2000),
                "message": (
                    f"–ü—Ä–∞–π—Å –¥–ª—è {city}: {city_pricing.get('ppr')}‚ÇΩ/—á–∞—Å, "
                    f"–º–∏–Ω–∏–º—É–º {city_pricing.get('min_hours', 2.0)} —á–∞—Å–∞"
                )
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            _city_pricing_cache[city] = (result, time.time())
            return result
        else:
            is_supported = cities.api.is_city_supported(city)
            
            if is_supported:
                logger.info(f"–ì–æ—Ä–æ–¥ {city} –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã")
                result = {
                    "success": True,
                    "city": city,
                    "ppr": 700,
                    "min_hours": 2.0,
                    "shift_8h": 580,
                    "shift_12h": 500,
                    "gazelle": 2000,
                    "message": f"–ü—Ä–∞–π—Å –¥–ª—è {city}: 700‚ÇΩ/—á–∞—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞), –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞"
                }
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                _city_pricing_cache[city] = (result, time.time())
                return result
            else:
                logger.warning(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return {
                    "success": False,
                    "error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "city": city,
                    "message": (
                        f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. "
                        f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ 1000+ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏. "
                        f"–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                    )
                }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {e}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"
        }


@monitored_function("create_bitrix_deal_legal")
@retry_with_backoff(
    config=RetryConfig(max_attempts=3, initial_delay=1.0, max_delay=5.0),
    exceptions=(ConnectionError, TimeoutError, Exception)
)
def _create_bitrix_deal_legal_with_retry(
    phone: str,
    username: str,
    source_description: str,
    company_name: Optional[str] = None
) -> Any:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —é—Ä–ª–∏—Ü–∞ —Å retry"""
    circuit_breaker = get_circuit_breaker("bitrix_api")
    
    try:
        result = circuit_breaker.call(
            recalls.bitrix.create_deal_from_avito_legal,
            phone=phone,
            username=username,
            source_description=source_description,
            company_name=company_name
        )
        return result
    except CircuitBreakerOpenError as e:
        logger.error(f"Circuit breaker OPEN –¥–ª—è Bitrix API (legal): {e}")
        raise ConnectionError("Bitrix API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def handle_create_bitrix_deal_legal(arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
    """
    try:
        phone = arguments.get("phone")
        if not phone:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "message": "–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            }
        
        normalized_phone = utils.telephone(phone)
        if not normalized_phone:
            return {
                "success": False,
                "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "message": f"–ù–æ–º–µ—Ä {phone} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            }
        
        company_name = arguments.get("company_name")
        city = arguments.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        hours = arguments.get("hours", "")
        people = arguments.get("people", "")
        work_type = arguments.get("work_type", "")
        summary = arguments.get("summary", "")
        
        source_parts = ["–Æ–†.–õ–ò–¶–û"]
        if city:
            source_parts.append(f"–ì–æ—Ä–æ–¥: {city}")
        if hours:
            source_parts.append(f"–ß–∞—Å–æ–≤: {hours}")
        if people:
            source_parts.append(f"–ì—Ä—É–∑—á–∏–∫–æ–≤: {people}")
        if work_type:
            source_parts.append(f"–¢–∏–ø: {work_type}")
        if summary:
            source_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {summary}")
        
        source_description = " | ".join(source_parts)
        
        chat_id = context.get("chat_id") if context else None
        if chat_id:
            import chats_log
            try:
                dialogue_summary = chats_log.api.get_chat_summary(chat_id, max_messages=5)
                if dialogue_summary:
                    source_description = f"{source_description} | –ò—Å—Ç–æ—Ä–∏—è: {dialogue_summary}"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Æ–†–õ–ò–¶–ê: {normalized_phone}, –∫–æ–º–ø–∞–Ω–∏—è={company_name}")
        
        try:
            deal_result = _create_bitrix_deal_legal_with_retry(
                phone=normalized_phone,
                username="AvitoUser",
                source_description=source_description,
                company_name=company_name
            )
        except (ConnectionError, TimeoutError) as e:
            logger.error(f"Bitrix API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —é—Ä–ª–∏—Ü–∞ –ø–æ—Å–ª–µ retry: {e}")
            _send_deal_failure_alert(
                normalized_phone,
                source_description + " [–Æ–†–õ–ò–¶–û]",
                f"API unavailable: {e}"
            )
            return {
                "success": False,
                "error": "Bitrix API unavailable",
                "message": "–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
            }
        
        if deal_result:
            deal_id = deal_result if isinstance(deal_result, int) else "—Å–æ–∑–¥–∞–Ω–∞"
            logger.info(f"–°–¥–µ–ª–∫–∞ —é—Ä–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {deal_id}")
            return {
                "success": True,
                "deal_id": deal_id,
                "phone": normalized_phone,
                "company_name": company_name,
                "message": "–°–¥–µ–ª–∫–∞ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
            }
        else:
            logger.error("–ë–∏—Ç—Ä–∏–∫—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —é—Ä–ª–∏—Ü–∞")
            _send_deal_failure_alert(normalized_phone, source_description + " [–Æ–†–õ–ò–¶–û]", "Empty result from Bitrix")
            return {
                "success": False,
                "error": "Empty result from Bitrix",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —é—Ä–ª–∏—Ü–∞: {e}")
        logger.error(traceback.format_exc())
        _send_deal_failure_alert(
            phone=arguments.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω"),
            details=f"{arguments} [–Æ–†–õ–ò–¶–û]",
            error=str(e)
        )
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏"
        }


FUNCTION_HANDLERS = {
    "get_city_pricing": handle_get_city_pricing,
    "create_bitrix_deal": handle_create_bitrix_deal,
    "create_bitrix_deal_legal": handle_create_bitrix_deal_legal,
    "calculate_price_estimate": handle_calculate_price_estimate,
}


def execute_function(function_name: str, arguments: Dict[str, Any], context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑–≤–∞–ª AI
        arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç AI
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (chat_id, user_id, ad_data)
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    """
    logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name}")
    logger.debug(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(arguments, ensure_ascii=False)}")
    
    if function_name not in FUNCTION_HANDLERS:
        error_msg = f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"
        logger.error(error_msg)
        return {
            "success": False,
            "error": "Unknown function",
            "message": error_msg
        }
    
    handler = FUNCTION_HANDLERS[function_name]
    
    try:
        result = handler(arguments, context)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {json.dumps(result, ensure_ascii=False)[:200]}")
        return result
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ execute_function: {e}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "error": str(e),
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"
        }


def format_function_result_for_ai(result: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ AI
    
    AI –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI
    """
    if result.get("success"):
        return json.dumps({
            "status": "success",
            "data": {k: v for k, v in result.items() if k != "success"}
        }, ensure_ascii=False)
    else:
        return json.dumps({
            "status": "error",
            "error": result.get("error", "Unknown error"),
            "message": result.get("message", "")
        }, ensure_ascii=False)

