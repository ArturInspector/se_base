"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ AI –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥–∏–∞–ª–æ–≥–æ–≤

–ü—Ä–∏–Ω—Ü–∏–ø: –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
1. Correctness (–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö)
2. Efficiency (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—à–Ω–µ–µ)
3. Safety (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª)
4. Quality (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∫—Ä–∞—Ç–∫–æ—Å—Ç—å)

Score: 0.0 - 1.0
"""
import re
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import json

logger = logging.getLogger(__name__)


@dataclass
class MessageGrade:
    """–û—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è AI"""
    score: float  # 0.0-1.0
    correctness: float  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    efficiency: float  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—à–Ω–µ–µ)
    safety: float  # –°–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
    quality: float  # –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
    
    # Flags
    has_hallucination: bool = False
    is_too_verbose: bool = False
    missed_opportunity: bool = False
    violated_business_rules: bool = False
    
    # Details
    issues: List[str] = None
    
    def __post_init__(self):
        if self.issues is None:
            self.issues = []


@dataclass
class ConversationGrade:
    """–û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    score: float  # 0-100
    outcome: str  # 'deal_created', 'client_left', 'handoff'
    total_messages: int
    messages_to_deal: Optional[int]
    unnecessary_questions: int
    issues: List[str]
    
    had_hallucinations: bool = False
    had_data_extraction_errors: bool = False
    had_business_rule_violations: bool = False


class ConversationGrader:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–µ–π–¥–µ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    """
    
    def __init__(self):
        self.business_rules = self._load_business_rules()
    
    def _load_business_rules(self) -> Dict:
        """–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return {
            "min_people": 2,
            "max_people_without_calc": 10,
            "min_hours": 1,
            "large_order_threshold": {"people": 5, "hours": 6},
            "forbidden_phrases": [
                "–ø—Ä–∏–º–µ—Ä–Ω–æ",
                "–æ–∫–æ–ª–æ",
                "–º–æ–∂–µ—Ç –±—ã—Ç—å",
                "–Ω–µ —É–≤–µ—Ä–µ–Ω",
                "—Å–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –∏ –≤–µ—Ä–Ω—É—Å—å"
            ],
            "required_in_first_message": [
                "ai-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
                "–±–µ—Ç–∞-—Ç–µ—Å—Ç",
                "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ]
        }
    
    def grade_message(
        self,
        user_message: str,
        ai_response: str,
        extracted_data: Dict,
        function_calls: List[Dict],
        context: Dict = None
    ) -> MessageGrade:
        """
        –û—Ü–µ–Ω–∏—Ç—å –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ AI
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            ai_response: –û—Ç–≤–µ—Ç AI
            extracted_data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (city, people, hours, phone)
            function_calls: –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑–≤–∞–ª AI
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞)
        
        Returns:
            MessageGrade —Å –æ—Ü–µ–Ω–∫–æ–π 0.0-1.0
        """
        issues = []
        
        # 1. CORRECTNESS (–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        correctness = self._grade_correctness(
            user_message, extracted_data, issues
        )
        
        # 2. EFFICIENCY (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—à–Ω–µ–µ)
        efficiency = self._grade_efficiency(
            user_message, ai_response, extracted_data, context, issues
        )
        
        # 3. SAFETY (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª)
        safety = self._grade_safety(
            extracted_data, ai_response, function_calls, issues
        )
        
        # 4. QUALITY (–∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞)
        quality = self._grade_quality(
            ai_response, context, issues
        )
        
        # Overall score (weighted average)
        score = (
            correctness * 0.35 +  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ
            efficiency * 0.25 +   # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            safety * 0.30 +       # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞)
            quality * 0.10        # –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
        )
        
        # Flags
        has_hallucination = any("–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è" in issue.lower() for issue in issues)
        is_too_verbose = len(ai_response) > 400
        missed_opportunity = any("—É–ø—É—Å—Ç–∏–ª" in issue.lower() for issue in issues)
        violated_business_rules = safety < 1.0
        
        return MessageGrade(
            score=score,
            correctness=correctness,
            efficiency=efficiency,
            safety=safety,
            quality=quality,
            has_hallucination=has_hallucination,
            is_too_verbose=is_too_verbose,
            missed_opportunity=missed_opportunity,
            violated_business_rules=violated_business_rules,
            issues=issues
        )
    
    def _grade_correctness(
        self,
        user_message: str,
        extracted_data: Dict,
        issues: List[str]
    ) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω –≥–æ—Ä–æ–¥
        - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ª—é–¥–∏/—á–∞—Å—ã
        - –ù–µ—Ç –ª–∏ —Ñ–∞–Ω—Ç–∞–∑–∏–π (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π)
        """
        score = 1.0
        message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
        if extracted_data.get('city'):
            city = extracted_data['city']
            
            # –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∏–ª–∏ –≤ ad_data)
            if city.lower() not in message_lower:
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ ad_data - —ç—Ç–æ –û–ö
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–ª–∞—Å—Ç—å/—Ä–∞–π–æ–Ω
            if any(word in city.lower() for word in ['–æ–±–ª–∞—Å—Ç—å', '—Ä–∞–π–æ–Ω', '–æ–∫—Ä—É–≥']):
                issues.append("‚ùå –ò–∑–≤–ª–µ—á–µ–Ω —Ä–µ–≥–∏–æ–Ω –≤–º–µ—Å—Ç–æ –≥–æ—Ä–æ–¥–∞")
                score -= 0.3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ people
        if extracted_data.get('people'):
            people = extracted_data['people']
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            numbers = re.findall(r'\d+', message_lower)
            if str(people) not in numbers and people not in [int(n) for n in numbers]:
                issues.append(f"‚ùå –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è: –ª—é–¥–∏={people} –Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                score -= 0.5
            
            # –ú–∏–Ω–∏–º—É–º 2
            if people < 2:
                issues.append(f"üî¥ –ö–†–ò–¢–ò–ß–ù–û: people={people} < 2")
                score = 0.0  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ hours
        if extracted_data.get('hours'):
            hours = extracted_data['hours']
            numbers = re.findall(r'\d+', message_lower)
            
            if str(hours) not in numbers and hours not in [int(n) for n in numbers]:
                issues.append(f"‚ùå –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è: —á–∞—Å—ã={hours} –Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                score -= 0.4
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if extracted_data.get('phone'):
            phone = extracted_data['phone']
            phone_pattern = r'(\+7|8)?[\d\s\-\(\)]{10,15}'
            
            if not re.search(phone_pattern, user_message):
                issues.append("‚ùå –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è: —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                score -= 0.6
        
        return max(0.0, score)
    
    def _grade_efficiency(
        self,
        user_message: str,
        ai_response: str,
        extracted_data: Dict,
        context: Optional[Dict],
        issues: List[str]
    ) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—à–Ω–µ–µ)
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
        - –ù–µ –∑–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç function calling –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
        """
        score = 1.0
        
        # –ö–ª–∏–µ–Ω—Ç –¥–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω - AI –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É
        phone_in_message = bool(re.search(r'(\+7|8)?\d{10}', user_message))
        if phone_in_message and 'create_bitrix_deal' not in str(extracted_data):
            issues.append("‚ö†Ô∏è –£–ø—É—Å—Ç–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å, –Ω–æ —Å–¥–µ–ª–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            score -= 0.4
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ —á—Ç–æ —É–∂–µ –µ—Å—Ç—å?
        if extracted_data.get('city') and '–≥–æ—Ä–æ–¥' in ai_response.lower():
            issues.append("‚ö†Ô∏è –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥, —Ö–æ—Ç—è –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω")
            score -= 0.3
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É?
        questions = ai_response.count('?')
        if questions > 1:
            issues.append(f"‚ö†Ô∏è –ó–∞–¥–∞–µ—Ç {questions} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É (–Ω—É–∂–µ–Ω 1)")
            score -= 0.2
        
        # –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å get_city_pricing –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if extracted_data.get('city') and not extracted_data.get('ppr'):
            if 'get_city_pricing' not in str(context or {}):
                issues.append("‚ö†Ô∏è –ù–µ –≤—ã–∑–≤–∞–ª get_city_pricing –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
                score -= 0.3
        
        return max(0.0, score)
    
    def _grade_safety(
        self,
        extracted_data: Dict,
        ai_response: str,
        function_calls: List[Dict],
        issues: List[str]
    ) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ú–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞
        - –¶–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑ get_city_pricing
        - –Æ—Ä–ª–∏—Ü–∞: —É—Ç–æ—á–Ω–∏–ª –ª–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        score = 1.0
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞
        if extracted_data.get('people') and extracted_data['people'] < 2:
            issues.append("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞")
            return 0.0  # –ê–≤—Ç–æ–ø—Ä–æ–≤–∞–ª
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –¶–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
        price_pattern = r'\d{3,5}\s*‚ÇΩ'
        if re.search(price_pattern, ai_response):
            # –ï—Å—Ç—å —Ü–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ get_city_pricing
            has_get_pricing = any(
                fc.get('function') == 'get_city_pricing' 
                for fc in function_calls
            )
            if not has_get_pricing:
                issues.append("‚ùå –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è —Ü–µ–Ω—ã: –Ω–µ –≤—ã–∑–≤–∞–ª get_city_pricing")
                score -= 0.6
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ë–æ–ª—å—à–∏–µ –∑–∞–∫–∞–∑—ã - —É—Ç–æ—á–Ω–∏—Ç—å —é—Ä–ª–∏—Ü–æ
        people = extracted_data.get('people', 0)
        hours = extracted_data.get('hours', 0)
        
        if (people >= 5 or hours >= 6) and not extracted_data.get('is_legal_entity'):
            if '–∫–æ–º–ø–∞–Ω–∏' not in ai_response.lower() and '—é—Ä' not in ai_response.lower():
                issues.append("‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –∑–∞–∫–∞–∑: –Ω–µ —É—Ç–æ—á–Ω–∏–ª –∫–æ–º–ø–∞–Ω–∏—è/—á–∞—Å—Ç–Ω—ã–π")
                score -= 0.3
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ù–µ –¥–æ–ª–∂–µ–Ω –æ–±–µ—â–∞—Ç—å —á—Ç–æ-—Ç–æ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        forbidden = self.business_rules['forbidden_phrases']
        for phrase in forbidden:
            if phrase in ai_response.lower():
                issues.append(f"‚ö†Ô∏è –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞: '{phrase}'")
                score -= 0.2
                break
        
        return max(0.0, score)
    
    def _grade_quality(
        self,
        ai_response: str,
        context: Optional[Dict],
        issues: List[str]
    ) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        - –ù–∞–ª–∏—á–∏–µ disclaimer –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
        """
        score = 1.0
        
        # –î–ª–∏–Ω–∞ (–æ–ø—Ç–∏–º—É–º: 50-300 —Å–∏–º–≤–æ–ª–æ–≤)
        length = len(ai_response)
        if length > 400:
            issues.append(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ({length} —Å–∏–º–≤–æ–ª–æ–≤)")
            score -= 0.3
        elif length < 30:
            issues.append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            score -= 0.2
        
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å disclaimer
        is_first = not context or len(context.get('history', [])) == 0
        if is_first:
            required = self.business_rules['required_in_first_message']
            has_disclaimer = any(
                phrase in ai_response.lower() 
                for phrase in required
            )
            if not has_disclaimer:
                issues.append("‚ö†Ô∏è –ù–µ—Ç disclaimer –æ–± AI –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                score -= 0.4
        
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç—å)
        if ai_response.count('‚Ä¢') > 3 or ai_response.count('\n') > 4:
            issues.append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—Å–ø–∏—Å–∫–∏/–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è)")
            score -= 0.2
        
        return max(0.0, score)
    
    def grade_conversation(
        self,
        chat_id: str,
        messages: List[Dict],
        deal_created: bool = False,
        deal_id: Optional[int] = None
    ) -> ConversationGrade:
        """
        –û—Ü–µ–Ω–∏—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ —Ü–µ–ª–∏–∫–æ–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
            deal_created: –°–æ–∑–¥–∞–Ω–∞ –ª–∏ —Å–¥–µ–ª–∫–∞
            deal_id: ID —Å–¥–µ–ª–∫–∏
        
        Returns:
            ConversationGrade —Å –æ—Ü–µ–Ω–∫–æ–π 0-100
        """
        issues = []
        total_messages = len(messages)
        
        # Outcome
        if deal_created:
            outcome = "deal_created"
        elif total_messages == 0:
            outcome = "no_messages"
        elif total_messages == 1:
            outcome = "client_left_immediately"
        else:
            outcome = "client_left"
        
        # –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –¥–ª—è —Å–¥–µ–ª–∫–∏
        messages_to_deal = None
        if deal_created:
            messages_to_deal = total_messages
            
            # –ò–¥–µ–∞–ª—å–Ω–æ: 1-3 —Å–æ–æ–±—â–µ–Ω–∏—è
            if messages_to_deal <= 3:
                issues.append("‚úÖ –û—Ç–ª–∏—á–Ω–æ: —Å–¥–µ–ª–∫–∞ –∑–∞ 1-3 —Å–æ–æ–±—â–µ–Ω–∏—è")
            elif messages_to_deal <= 5:
                issues.append("‚úîÔ∏è –•–æ—Ä–æ—à–æ: —Å–¥–µ–ª–∫–∞ –∑–∞ 4-5 —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                issues.append(f"‚ö†Ô∏è –î–æ–ª–≥–æ: {messages_to_deal} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Å–¥–µ–ª–∫–∏")
        
        # –õ–∏—à–Ω–∏–µ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å—ã (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        unnecessary_questions = 0
        for msg in messages:
            if msg.get('role') == 'assistant' and msg.get('content'):
                # –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π —Å—Ä–∞–∑—É?
                if msg['content'].count('?') > 1:
                    unnecessary_questions += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º
        had_hallucinations = any(
            msg.get('has_hallucination', False) 
            for msg in messages
        )
        
        had_data_extraction_errors = any(
            msg.get('correctness', 1.0) < 0.7
            for msg in messages if 'correctness' in msg
        )
        
        had_business_rule_violations = any(
            msg.get('violated_business_rules', False)
            for msg in messages
        )
        
        # –ü–æ–¥—Å—á–µ—Ç score (0-100)
        score = 100.0
        
        if not deal_created:
            score -= 50  # –ù–µ —Å–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ = -50 –±–∞–ª–ª–æ–≤
        
        if messages_to_deal and messages_to_deal > 5:
            score -= (messages_to_deal - 5) * 5  # -5 –∑–∞ –∫–∞–∂–¥–æ–µ –ª–∏—à–Ω–µ–µ
        
        if had_hallucinations:
            score -= 20
        
        if had_business_rule_violations:
            score -= 30
        
        if unnecessary_questions > 0:
            score -= unnecessary_questions * 5
        
        score = max(0.0, min(100.0, score))
        
        return ConversationGrade(
            score=score,
            outcome=outcome,
            total_messages=total_messages,
            messages_to_deal=messages_to_deal,
            unnecessary_questions=unnecessary_questions,
            issues=issues,
            had_hallucinations=had_hallucinations,
            had_data_extraction_errors=had_data_extraction_errors,
            had_business_rule_violations=had_business_rule_violations
        )


