"""
Simple AI Processor V2 - –ú–∏–Ω–∏–º–∞–ª–∏–∑–º

–ü–†–ò–ù–¶–ò–ü: 
1 AI –≤—ã–∑–æ–≤ (–∏–∑–≤–ª–µ—á—å JSON —Å —Ñ–ª–∞–≥–∞–º–∏) ‚Üí if-else –ø–æ —Ñ–ª–∞–≥–∞–º ‚Üí –®–∞–±–ª–æ–Ω ‚Üí –û—Ç–≤–µ—Ç

NO BULLSHIT:
- –ù–µ—Ç Context Analyzer
- –ù–µ—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
- –ù–µ—Ç confidence –ø—Ä–æ–≤–µ—Ä–æ–∫
- –ù–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
"""
import json
import logging
import time
from typing import Dict, Any, Tuple

import openai

import sys
sys.path.insert(0, '/home/ludskoe/kwork/pepsiai/se_base')
from chats_log import api as chats_log
from db import Session

logger = logging.getLogger(__name__)

EXTRACTION_SCHEMA = {
    "type": "object",
    "properties": {
        "city": {"type": "string"},
        "people": {"type": "integer"},
        "hours": {"type": "number"},
        "phone": {"type": "string"},
        "floor": {"type": "integer"},
        "has_elevator": {"type": "boolean"},
        "single_item_weight": {"type": "integer"},
        
        # –§–õ–ê–ì–ò (AI –†–ï–®–ê–ï–¢!)
        "is_greeting": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è (–ø—Ä–∏–≤–µ—Ç, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å)"
        },
        "is_forbidden_service": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –õ–Æ–î–ï–ô (–¥–µ–¥–∞, —Å—Ç–∞—Ä–∏–∫–∞, –±–æ–ª—å–Ω–æ–≥–æ, –ø–æ–∫–æ–π–Ω–∏–∫–∞)"
        },
        "needs_tackling": {
            "type": "boolean", 
            "description": "TRUE –µ—Å–ª–∏ —Å–µ–π—Ñ/–ø–∏–∞–Ω–∏–Ω–æ/—Ä–æ—è–ª—å/—Å—Ç–∞–Ω–æ–∫/–±–∞–Ω–∫–æ–º–∞—Ç (–≤–µ—Å >70–∫–≥ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–º–µ—Ç)"
        },
        "is_legal_client": {
            "type": "boolean",
            "description": "TRUE –µ—Å–ª–∏ —é—Ä–ª–∏—Ü–æ: –æ—Ñ–∏—Å, —Å–∫–ª–∞–¥, –º–∞–≥–∞–∑–∏–Ω, –æ–≤–æ—â–µ–±–∞–∑–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ, >4 –≥—Ä—É–∑—á–∏–∫–æ–≤, —Å—á–µ—Ç, –¥–æ–≥–æ–≤–æ—Ä"
        }
    },
    "required": ["city", "people", "hours", "phone", "floor", "has_elevator", 
                 "single_item_weight", "is_greeting", "is_forbidden_service", "needs_tackling", "is_legal_client"],
    "additionalProperties": False
}

EXTRACTION_PROMPT = """–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª—É–∂–±—ã –≥—Ä—É–∑—á–∏–∫–æ–≤.

–í–ê–ñ–ù–û - –§–õ–ê–ì–ò:
- is_forbidden_service: TRUE –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ß–ï–õ–û–í–ï–ö–ê (–¥–µ–¥–∞, —Å—Ç–∞—Ä–∏–∫–∞, –±–∞–±—É—à–∫—É, –±–æ–ª—å–Ω–æ–≥–æ, –ø–æ–∫–æ–π–Ω–∏–∫–∞, –∏–Ω–≤–∞–ª–∏–¥–∞)
- needs_tackling: TRUE –µ—Å–ª–∏ —Å–µ–π—Ñ/–ø–∏–∞–Ω–∏–Ω–æ/—Ä–æ—è–ª—å/—Å—Ç–∞–Ω–æ–∫/–±–∞–Ω–∫–æ–º–∞—Ç –ò–õ–ò –≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ >70–∫–≥
- is_legal_client: TRUE –µ—Å–ª–∏ —é—Ä–ª–∏—Ü–æ (–æ—Ñ–∏—Å, —Å–∫–ª–∞–¥, –º–∞–≥–∞–∑–∏–Ω, —Å—á–µ—Ç, –¥–æ–≥–æ–≤–æ—Ä, —Ä–µ–≥—É–ª—è—Ä–Ω–æ, >4 –≥—Ä—É–∑—á–∏–∫–æ–≤, —Å–º–µ–Ω–∞)

–ü—Ä–∏–º–µ—Ä—ã:
"–ù—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä–∏–∫–∞ —Å 5 —ç—Ç–∞–∂–∞" ‚Üí is_forbidden_service: true
"–ü–æ–¥–Ω—è—Ç—å —Å–µ–π—Ñ –Ω–∞ 3 —ç—Ç–∞–∂" ‚Üí needs_tackling: true
"–ì—Ä—É–∑—á–∏–∫–∏ –¥–ª—è –æ—Ñ–∏—Å–∞, –Ω—É–∂–µ–Ω —Å—á–µ—Ç" ‚Üí is_legal_client: true
"""


AI_DISCLAIMER = "üí¨ –Ø AI-–±–æ—Ç SE Express. "

TEMPLATES = {
    "greeting": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    
    "forbidden": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É –ª—é–¥–µ–π.",
    
    "floor_restriction": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ 3 —ç—Ç–∞–∂–∞ –±–µ–∑ –ª–∏—Ñ—Ç–∞.",
    
    "tackling_ask_phone": "–î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Å–µ–π—Ñ, –ø–∏–∞–Ω–∏–Ω–æ) —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–∫–µ–ª–∞–∂. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
    
    "legal_ask_phone": "–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç –∏ –¥–æ–≥–æ–≤–æ—Ä. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
    
    "ask_city": "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤–∞–º –Ω—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏?",
    
    "ask_details": "–°–∫–æ–ª—å–∫–æ –≥—Ä—É–∑—á–∏–∫–æ–≤ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –≤ {city}?",
    
    "show_price": "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ {city}: {price}‚ÇΩ ({people} –≥—Ä—É–∑—á–∏–∫–æ–≤ √ó {hours}—á). –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
    
    "deal_created": "–ó–∞—è–≤–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
    
    "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º."
}


PRICING = {
    "–ú–æ—Å–∫–≤–∞": {"ppr": 300, "min_hours": 3},
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {"ppr": 250, "min_hours": 3},
    "default": {"ppr": 200, "min_hours": 4}
}


class SimpleAIProcessorV2:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: 1 AI –≤—ã–∑–æ–≤ ‚Üí if-else ‚Üí —à–∞–±–ª–æ–Ω"""
    
    def __init__(self):
        logger.info("SimpleAIProcessorV2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        self._init_openai()
    
    def _init_openai(self):
        import config
        try:
            self.openai_client = openai.OpenAI(
                api_key=config.Production.OPENAI_API_KEY,
                base_url=config.Production.OPENAI_BASE_URL
            )
            logger.info("‚úÖ OpenAI client ready")
        except Exception as e:
            logger.error(f"‚ùå OpenAI init failed: {e}")
            self.openai_client = None
    
    def process(self, message: str, chat_id: str = None, avito_message_model=None) -> str:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç
        """
        start_time = time.time()
        
        try:
            extracted = self._extract_data(message, chat_id)
            response, action = self._apply_rules(extracted)
            
            # –î–æ–±–∞–≤–∏—Ç—å disclaimer –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            is_first_message = self._is_first_message(chat_id)
            if is_first_message:
                response = AI_DISCLAIMER + response
            
            response_time_ms = int((time.time() - start_time) * 1000)
            self._log(chat_id, message, response, extracted, action, response_time_ms, avito_message_model)
            
            logger.info(f"‚úÖ Response: {action} | First:{is_first_message} | {response_time_ms}ms")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return TEMPLATES["error"]
    
    def _is_first_message(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ?"""
        if not chat_id:
            return True
        
        try:
            with Session() as session:
                from chats_log.entities import ChatLog
                count = session.query(ChatLog).filter(
                    ChatLog.chat_id == chat_id,
                    ChatLog.is_success == True
                ).count()
                return count == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_first_message: {e}")
            return True
    
    def _extract_data(self, message: str, chat_id: str = None) -> Dict[str, Any]:
        """
        AI –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí JSON —Å —Ñ–ª–∞–≥–∞–º–∏
        """
        if not self.openai_client:
            return self._fallback_extract(message)
        
        try:
            context = []
            if chat_id:
                try:
                    history = chats_log.get_chat_history(chat_id, limit=3)
                    context = history[-3:] if history else []
                except Exception as e:
                    logger.error(f"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e}")
            
            messages = context + [
                {"role": "system", "content": EXTRACTION_PROMPT},
                {"role": "user", "content": message}
            ]
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                response_format={
                    "type": "json_schema",
                    "json_schema": {
                        "name": "data_extraction",
                        "strict": True,
                        "schema": EXTRACTION_SCHEMA
                    }
                },
                temperature=0,
                max_tokens=300
            )
            
            extracted = json.loads(response.choices[0].message.content)
            logger.info(f"üìä Extracted: city={extracted['city']}, people={extracted['people']}, "
                       f"forbidden={extracted['is_forbidden_service']}, tackling={extracted['needs_tackling']}")
            
            return extracted
            
        except Exception as e:
            logger.error(f"‚ùå Extraction failed: {e}")
            return self._fallback_extract(message)
    
    def _fallback_extract(self, message: str) -> Dict:
        """Fallback –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            "city": "",
            "people": 0,
            "hours": 0,
            "phone": "",
            "floor": 0,
            "has_elevator": False,
            "single_item_weight": 0,
            "is_greeting": False,
            "is_forbidden_service": False,
            "needs_tackling": False,
            "is_legal_client": False
        }
    
    def _apply_rules(self, extracted: Dict) -> Tuple[str, str]:
        """
        IF-ELSE –ø–æ –§–õ–ê–ì–ê–ú (NO AI!)
        
        Returns:
            (response_text, action_name)
        """
        
        # –ü–†–ò–í–ï–¢–°–¢–í–ò–ï (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
        if extracted['is_greeting'] and not extracted['city'] and not extracted['people']:
            return (TEMPLATES["greeting"], "greeting")
        
        if extracted['is_forbidden_service']:
            return (TEMPLATES["forbidden"], "forbidden")
        
        if extracted['floor'] > 3 and not extracted['has_elevator']:
            return (TEMPLATES["floor_restriction"], "floor_restriction")
        if extracted['needs_tackling']:
            if not extracted['phone']:
                return (TEMPLATES["tackling_ask_phone"], "tackling_ask_phone")
            else:
                deal_id = self._create_deal(extracted, is_tackling=True)
                return (TEMPLATES["deal_created"].format(deal_id=deal_id), "tackling_deal_created")
        
        if extracted['is_legal_client']:
            if not extracted['phone']:
                return (TEMPLATES["legal_ask_phone"], "legal_ask_phone")
            else:
                deal_id = self._create_deal(extracted, is_legal=True)
                return (TEMPLATES["deal_created"].format(deal_id=deal_id), "legal_deal_created")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #1: –ì–æ—Ä–æ–¥
        if not extracted['city']:
            return (TEMPLATES["ask_city"], "ask_city")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #2: –î–µ—Ç–∞–ª–∏
        if not extracted['people'] or not extracted['hours']:
            city = extracted['city']
            return (TEMPLATES["ask_details"].format(city=city), "ask_details")
        
        # –°–ë–û–† –î–ê–ù–ù–´–• #3: –¢–µ–ª–µ—Ñ–æ–Ω + –ø–æ–∫–∞–∑ —Ü–µ–Ω—ã
        if not extracted['phone']:
            price = self._calculate_price(extracted)
            return (
                TEMPLATES["show_price"].format(
                    city=extracted['city'],
                    price=price,
                    people=extracted['people'],
                    hours=extracted['hours']
                ),
                "show_price"
            )
        
        deal_id = self._create_deal(extracted)
        return (TEMPLATES["deal_created"].format(deal_id=deal_id), "deal_created")
    
    def _calculate_price(self, extracted: Dict) -> int:
        """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã"""
        city = extracted['city']
        people = extracted['people']
        hours = extracted['hours']
        
        pricing = PRICING.get(city, PRICING["default"])
        ppr = pricing['ppr']
        min_hours = pricing['min_hours']
        hours_charged = max(hours, min_hours)
        
        return people * hours_charged * ppr
    
    def _create_deal(self, extracted: Dict, is_tackling: bool = False, is_legal: bool = False) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å"""
        try:
            from chat.ai.function_handlers import handle_create_bitrix_deal, handle_create_bitrix_deal_legal
            
            if is_legal:
                result = handle_create_bitrix_deal_legal(
                    arguments={
                        'phone': extracted['phone'],
                        'city': extracted['city'],
                        'hours': extracted['hours'],
                        'people': extracted['people']
                    },
                    context={}
                )
            else:
                price = self._calculate_price(extracted)
                result = handle_create_bitrix_deal(
                    arguments={
                        'phone': extracted['phone'],
                        'city': extracted['city'],
                        'hours': extracted['hours'],
                        'people': extracted['people'],
                        'price': price,
                        'summary': f"–¢–∞–∫–µ–ª–∞–∂: {extracted['single_item_weight']}–∫–≥" if is_tackling else "",
                        'floor': extracted['floor'],
                        'has_elevator': extracted['has_elevator']
                    },
                    context={}
                )
            
            if result.get('success'):
                deal_id = result.get('deal_id', '???')
                logger.info(f"‚úÖ Deal created: #{deal_id}")
                return str(deal_id)
            else:
                logger.error(f"‚ùå Deal creation failed: {result.get('error')}")
                return "ERROR"
                
        except Exception as e:
            logger.error(f"‚ùå Bitrix error: {e}")
            return "ERROR"
    
    def _log(self, chat_id, message, response, extracted, action, response_time_ms, avito_message_model):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î"""
        if not avito_message_model:
            return
        
        try:
            chats_log.create_chat_log(
                model=avito_message_model,
                is_success=True,
                answer=response,
                comment=f"Action:{action} | Flags:forbidden={extracted['is_forbidden_service']},tackling={extracted['needs_tackling']}",
                extracted_data=extracted,
                response_time_ms=response_time_ms
            )
            logger.info(f"‚úÖ Logged: {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå Log failed: {e}")

