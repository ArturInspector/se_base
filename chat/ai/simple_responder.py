"""
–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è Avito
–õ–æ–≥–∏–∫–∞: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Üí legal deal, –∏–Ω–∞—á–µ ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
"""
import json
import os
import re
import logging

logger = logging.getLogger(__name__)
LEGAL_KEYWORDS = [
    # –ë–µ–∑–Ω–∞–ª/–ù–î–°
    "–±–µ–∑–Ω–∞–ª", "–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π", "–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç", "–æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ –±–µ–∑–Ω–∞–ª—É", 
    "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", "—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", "—Ä/—Å", "—Ä—Å", "–Ω–¥—Å", 
    "–æ–ø–ª–∞—Ç–∞ —Å –Ω–¥—Å", "–±–µ–∑ –Ω–¥—Å", "—Å –Ω–¥—Å",
    
    # –î–æ–≥–æ–≤–æ—Ä—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã
    "–¥–æ–≥–æ–≤–æ—Ä", "–∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä", "–¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞", 
    "–¥–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–∫–ø", "—Å—á–µ—Ç", 
    "–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ø–µ—á–∞—Ç—å", "–ø–æ–¥–ø–∏—Å—å",
    "–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–ø—Ä–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–ø",
    
    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "—é—Ä–ª–∏—Ü–æ", "—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "–∫–æ–º–ø–∞–Ω–∏—è", "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ", 
    "–æ–æ–æ", "–∏–ø", "—Ñ–∏–ª–∏–∞–ª", "–æ—Ñ–∏—Å", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä",
    
    # –¢–∞–∫–µ–ª–∞–∂/—Å–ø–µ—Ü —Ä–∞–±–æ—Ç—ã
    "—Ç–∞–∫–µ–ª–∞–∂", "—Å–µ–π—Ñ", "—Å—Ç–∞–Ω–æ–∫", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "—Å–µ—Ä–≤–µ—Ä", "–±–∞–Ω–∫–æ–º–∞—Ç", 
    "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ", "—Ä–∞–∑–≥—Ä—É–∑–∫–∞ —Ñ—É—Ä—ã", "–ø–∞–ª–ª–µ—Ç", "–ø–∞–ª–ª–µ—Ç—ã", "—Å—Ç–µ–ª–ª–∞–∂", "—Å—Ç–µ–ª–ª–∞–∂–∏",
    "–æ—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥", "–ø–µ—Ä–µ–µ–∑–¥ –∫–æ–º–ø–∞–Ω–∏–∏", "–ø–µ—Ä–µ–µ–∑–¥ –æ—Ñ–∏—Å–∞", "–∞—Ä—Ö–∏–≤", 
    "–º–µ–±–µ–ª—å –æ—Ñ–∏—Å–Ω–∞—è", "—Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞", "–µ–≤—Ä–æ–ø–∞–ª–ª–µ—Ç", "—à—Ç–∞–±–µ–ª–µ—Ä",
    
    # –°–∫–ª–∞–¥/–ª–æ–≥–∏—Å—Ç–∏–∫–∞
    "—Å–∫–ª–∞–¥", "–ø–æ–≥—Ä—É–∑–∫–∞", "—Ä–∞–∑–≥—Ä—É–∑–∫–∞", "—Ñ—É—Ä–∞", "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª
    "–ø–µ—Ä—Å–æ–Ω–∞–ª", "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏", "–≥—Ä—É–∑—á–∏–∫–∏ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É", "–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É",
    "–Ω–∞ –æ–±—ä–µ–∫—Ç", "–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É", "–ø–æ–¥—Ä—è–¥—á–∏–∫–∏", "—Å—É–±–ø–æ–¥—Ä—è–¥", "—Å–º–µ–Ω–∞", "–≤–∞—Ö—Ç–∞",
    
    # –ó–∞–ø—Ä–æ—Å—ã
    "–ø—Ä–æ—à—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", "–ø—Ä–æ—Å—å–±–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
    "—É—Ç–æ—á–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è", "–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ", "–ø–ª–∞–Ω–∏—Ä—É–µ–º", "—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç",
    "–≥–æ—Ç–æ–≤—ã –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –Ω–¥—Å", "–Ω—É–∂–µ–Ω –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç",
    
    # –û–±—ä–µ–∫—Ç—ã
    "–æ–±—ä–µ–∫—Ç", "—Å—Ç—Ä–æ–π–∫–∞", "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–∑–∞–≤–æ–¥", "—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", "–æ—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    
    # –¢–µ–Ω–¥–µ—Ä—ã/–∑–∞—è–≤–∫–∏
    "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "—Ç–µ–Ω–¥–µ—Ä", "–∑–∞—è–≤–∫–∞", "–ø–æ–¥—Ä—è–¥", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ", "–ø–æ –≥—Ä–∞—Ñ–∏–∫—É",
    "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
]


class SimpleResponder:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ AI"""
    
    def __init__(self):
        self._load_pricing()
        logger.info("SimpleResponder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_pricing(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–æ–≤ –∏–∑ JSON"""
        try:
            pricing_path = os.path.join(os.path.dirname(__file__), '../../clean_pricing_data.json')
            with open(pricing_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.pricing = data.get('cities', {})
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.pricing)} –≥–æ—Ä–æ–¥–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–æ–≤: {e}")
            self.pricing = {}
    
    def _has_legal_keywords(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —é—Ä–ª–∏—Ü/—Ç–∞–∫–µ–ª–∞–∂–∞"""
        message_lower = message.lower()
        
        for keyword in LEGAL_KEYWORDS:
            if keyword in message_lower:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
                return True
        
        return False
    
    def _extract_phone(self, message: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ regex - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        patterns = [
            r'\+?7[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',  # +7(XXX)XXX-XX-XX
            r'8[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',      # 8(XXX)XXX-XX-XX
            r'\d{11}',                                                         # 79991234567
            r'\d{10}',                                                         # 9991234567
        ]
        
        for pattern in patterns:
            phone_match = re.search(pattern, message)
            if phone_match:
                phone = phone_match.group(0)
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —É–±—Ä–∞—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
                phone_digits = re.sub(r'\D', '', phone)
                
                # –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–∏—Ç—å 7 –≤ –Ω–∞—á–∞–ª–æ
                if len(phone_digits) == 10:
                    phone_digits = '7' + phone_digits
                
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 7
                if phone_digits.startswith('8') and len(phone_digits) == 11:
                    phone_digits = '7' + phone_digits[1:]
                
                logger.info(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–≤–ª–µ—á–µ–Ω: {phone_digits}")
                return phone_digits
        
        return ""
    
    def _calculate_min_price(self, city: str) -> tuple:
        """–†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (2 –≥—Ä—É–∑—á–∏–∫–∞ √ó min_hours)"""
        if city not in self.pricing:
            return None, None
        
        city_data = self.pricing[city]
        ppr = city_data.get('ppr', 200)
        min_hours = city_data.get('min_hours', 4.0)
        
        min_price = int(2 * min_hours * ppr)  # 2 –≥—Ä—É–∑—á–∏–∫–∞ –º–∏–Ω–∏–º—É–º
        
        return min_price, min_hours
    
    def _create_deal_legal(self, phone: str, city: str, message: str, chat_id: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —é—Ä–ª–∏—Ü"""
        try:
            from chat.ai.function_handlers import handle_create_bitrix_deal_legal
            
            result = handle_create_bitrix_deal_legal(
                arguments={
                    'phone': phone,
                    'city': city or '–ù–µ —É–∫–∞–∑–∞–Ω',
                    'hours': 0,
                    'people': 0,
                    'summary': f"–Æ—Ä–ª–∏—Ü–æ/–¢–∞–∫–µ–ª–∞–∂ | –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}"
                },
                context={'chat_id': chat_id}
            )
            
            if result.get('success'):
                deal_id = result.get('deal_id', 'UNKNOWN')
                logger.info(f"‚úÖ Legal deal created: #{deal_id}")
                return str(deal_id)
            else:
                logger.error(f"‚ùå Legal deal failed: {result.get('error')}")
                return 'ERROR'
        except Exception as e:
            logger.error(f"‚ùå Error creating legal deal: {e}")
            return 'ERROR'
    
    def _create_deal_regular(self, phone: str, city: str, message: str, chat_id: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        try:
            from chat.ai.function_handlers import handle_create_bitrix_deal
            
            result = handle_create_bitrix_deal(
                arguments={
                    'phone': phone,
                    'city': city or '–ù–µ —É–∫–∞–∑–∞–Ω',
                    'hours': 0,
                    'people': 0,
                    'summary': f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ | –ì–æ—Ä–æ–¥: {city} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}"
                },
                context={'chat_id': chat_id}
            )
            
            if result.get('success'):
                deal_id = result.get('deal_id', 'UNKNOWN')
                logger.info(f"‚úÖ Regular deal created: #{deal_id}")
                return str(deal_id)
            else:
                logger.error(f"‚ùå Regular deal failed: {result.get('error')}")
                return 'ERROR'
        except Exception as e:
            logger.error(f"‚ùå Error creating regular deal: {e}")
            return 'ERROR'
    
    def process(self, message: str, city: str = None, chat_id: str = None) -> str:
        """
        –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            city: –ì–æ—Ä–æ–¥ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito
            chat_id: ID —á–∞—Ç–∞
        
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        logger.info(f"üîç SimpleResponder: message='{message[:50]}...', city={city}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        phone = self._extract_phone(message)
        has_legal_keywords = self._has_legal_keywords(message)
        
        logger.info(f"üîç –¢–µ–ª–µ—Ñ–æ–Ω: {'‚úÖ ' + phone if phone else '‚ùå –Ω–µ—Ç'} | Legal keywords: {'‚úÖ' if has_legal_keywords else '‚ùå'}")
        
        # 1. LEGAL KEYWORDS + –¢–ï–õ–ï–§–û–ù ‚Üí —Å–æ–∑–¥–∞—Ç—å legal deal
        if has_legal_keywords and phone:
            deal_id = self._create_deal_legal(phone, city, message, chat_id)
            if deal_id == 'ERROR':
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø–æ–∑–∂–µ."
            return f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
        
        # 2. LEGAL KEYWORDS –ë–ï–ó –¢–ï–õ–ï–§–û–ù–ê ‚Üí –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        if has_legal_keywords and not phone:
            return "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        
        # 3. –¢–ï–õ–ï–§–û–ù –ë–ï–ó KEYWORDS ‚Üí —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é —Å–¥–µ–ª–∫—É
        if phone and not has_legal_keywords:
            deal_id = self._create_deal_regular(phone, city or "–ù–µ —É–∫–∞–∑–∞–Ω", message, chat_id)
            if deal_id == 'ERROR':
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏."
            return f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        
        # 4. –ù–ï–¢ –¢–ï–õ–ï–§–û–ù–ê –ò –ù–ï–¢ KEYWORDS ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞ ‚Üí –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        if not city:
            return "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤–∞–º –Ω—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏?"
        
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤ –±–∞–∑–µ ‚Üí –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        if city not in self.pricing:
            return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≥–æ—Ä–æ–¥–µ {city}. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        min_price, min_hours = self._calculate_min_price(city)
        
        if min_price:
            return f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {city}: –æ—Ç {min_price}‚ÇΩ (–º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–∑—á–∏–∫–∞ –Ω–∞ {int(min_hours)} —á–∞—Å–∞). –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        else:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."

