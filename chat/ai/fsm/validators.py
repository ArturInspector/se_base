"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ AI –∏ —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞

SRP: –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
"""
import logging
from typing import Tuple, List, Dict
from .states import DialogueState, StateContext

logger = logging.getLogger(__name__)


class AnswerValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ AI –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π"""
    
    def validate_answer(
        self, 
        response: str, 
        context: StateContext,
        function_calls: List = None
    ) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        
        Returns:
            Tuple[bool, List[str]]: (is_valid, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º)
        """
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response or len(response.strip()) < 5:
            issues.append("–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π –ø–æ –¥–∞–Ω–Ω—ã–º
        if context.city and context.city not in response and context.current_state != DialogueState.BOOKING_CONFIRMATION:
            # –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å –≥–æ—Ä–æ–¥
            pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ –ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å
        if context.people and "—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑—á–∏–∫–æ–≤" in response.lower():
            issues.append(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑—á–∏–∫–æ–≤ (—É–∂–µ –µ—Å—Ç—å: {context.people})")
        
        if context.hours and "—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤" in response.lower():
            issues.append(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Å—ã (—É–∂–µ –µ—Å—Ç—å: {context.hours})")
        
        if context.city and "–∫–∞–∫–æ–π –≥–æ—Ä–æ–¥" in response.lower():
            issues.append(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ (—É–∂–µ –µ—Å—Ç—å: {context.city})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if context.current_state == DialogueState.COMPLETED and "—Ç–µ–ª–µ—Ñ–æ–Ω" in response.lower():
            issues.append("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        
        is_valid = len(issues) == 0
        
        if not is_valid:
            logger.warning(f"[VALIDATOR] –ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ: {', '.join(issues)}")
        
        return is_valid, issues


class MetricsCollector:
    """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.metrics = {
            'total_messages': 0,
            'validation_fails': 0,
            'hallucinations': 0,
            'function_call_errors': 0,
            'successful_deals': 0,
            'avg_messages_to_phone': [],
            'state_transitions': {}
        }
    
    def record_message(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.metrics['total_messages'] += 1
    
    def record_validation_fail(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–∞–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.metrics['validation_fails'] += 1
    
    def record_hallucination(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—é AI"""
        self.metrics['hallucinations'] += 1
    
    def record_function_call_error(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.metrics['function_call_errors'] += 1
    
    def record_successful_deal(self, messages_count: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É"""
        self.metrics['successful_deals'] += 1
        self.metrics['avg_messages_to_phone'].append(messages_count)
    
    def record_state_transition(self, from_state: DialogueState, to_state: DialogueState):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        key = f"{from_state.name} -> {to_state.name}"
        self.metrics['state_transitions'][key] = self.metrics['state_transitions'].get(key, 0) + 1
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.metrics.copy()
        
        if stats['avg_messages_to_phone']:
            stats['avg_messages_to_phone_value'] = sum(stats['avg_messages_to_phone']) / len(stats['avg_messages_to_phone'])
        else:
            stats['avg_messages_to_phone_value'] = 0
        
        if stats['total_messages'] > 0:
            stats['validation_fail_rate'] = stats['validation_fails'] / stats['total_messages'] * 100
            stats['hallucination_rate'] = stats['hallucinations'] / stats['total_messages'] * 100
        else:
            stats['validation_fail_rate'] = 0
            stats['hallucination_rate'] = 0
        
        return stats
    
    def print_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        stats = self.get_stats()
        
        print("\n" + "="*80)
        print(" üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–ß–ï–°–¢–í–£ –î–ò–ê–õ–û–ì–û–í")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['successful_deals']}")
        
        if stats['successful_deals'] > 0:
            print(f"–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {stats['avg_messages_to_phone_value']:.1f}")
        
        print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:")
        print(f"  –ü—Ä–æ–≤–∞–ª–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {stats['validation_fails']} ({stats['validation_fail_rate']:.1f}%)")
        print(f"  –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π: {stats['hallucinations']} ({stats['hallucination_rate']:.1f}%)")
        print(f"  –û—à–∏–±–æ–∫ function calling: {stats['function_call_errors']}")
        
        if stats['state_transitions']:
            print(f"\nüîÑ –ü–ï–†–ï–•–û–î–´ –°–û–°–¢–û–Ø–ù–ò–ô:")
            for transition, count in sorted(stats['state_transitions'].items(), key=lambda x: x[1], reverse=True):
                print(f"  {transition}: {count}")
        
        print("="*80 + "\n")
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        self.__init__()


# Singleton –¥–ª—è –º–µ—Ç—Ä–∏–∫
_metrics_collector = None


def get_metrics_collector() -> MetricsCollector:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MetricsCollector"""
    global _metrics_collector
    if _metrics_collector is None:
        _metrics_collector = MetricsCollector()
    return _metrics_collector

