"""
A/B Testing Experiment Manager

SUPER SIMPLE: Pick a variant for each chat_id
Supports 3 approaches:
- control: base prompt (current)
- fsm: Finite State Machine
- structured: Structured Outputs
"""
import hashlib
import logging

logger = logging.getLogger(__name__)


class ExperimentManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç A/B testing –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    
    KISS principle: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ
    """
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    VARIANTS = {
        'control': 'Base Prompt (—Ç–µ–∫—É—â–∏–π)',
        'fsm': 'FSM —Å micro-prompts',
        'structured': 'Structured Outputs (OpenAI best practice)'
    }
    
    def __init__(self, force_variant: str = None):
        """
        Args:
            force_variant: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –í–°–ï–• (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                          –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ env: EXPERIMENT_VARIANT=structured
        """
        self.force_variant = force_variant
        
        if force_variant:
            logger.info(f"üß™ EXPERIMENT: Force variant = {force_variant}")
    
    def get_variant(self, chat_id: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è chat_id
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ï—Å–ª–∏ force_variant –∑–∞–¥–∞–Ω ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        2. –ò–Ω–∞—á–µ: —Ö–µ—à–∏—Ä—É–µ–º chat_id –∏ –¥–µ–ª–∏–º 33%/33%/33%
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        
        Returns:
            'control' | 'fsm' | 'structured'
        """
        # Force mode (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if self.force_variant:
            return self.force_variant
        
        # Hash-based distribution (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        hash_value = int(hashlib.md5(chat_id.encode()).hexdigest(), 16)
        bucket = hash_value % 100  # 0-99
        
        if bucket < 33:
            return 'control'
        elif bucket < 66:
            return 'fsm'
        else:
            return 'structured'
    
    def should_use_control(self, chat_id: str) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π (control) –≤–∞—Ä–∏–∞–Ω—Ç?"""
        return self.get_variant(chat_id) == 'control'
    
    def should_use_fsm(self, chat_id: str) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM?"""
        return self.get_variant(chat_id) == 'fsm'
    
    def should_use_structured(self, chat_id: str) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Structured Outputs?"""
        return self.get_variant(chat_id) == 'structured'
    
    @classmethod
    def from_env(cls):
        """–°–æ–∑–¥–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        force = os.getenv('EXPERIMENT_VARIANT', None)
        
        if force and force not in cls.VARIANTS:
            logger.warning(f"Invalid EXPERIMENT_VARIANT={force}, ignoring")
            force = None
        
        return cls(force_variant=force)


# Singleton –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
_experiment_manager = None

def get_experiment_manager() -> ExperimentManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    global _experiment_manager
    if _experiment_manager is None:
        _experiment_manager = ExperimentManager.from_env()
    return _experiment_manager


def set_force_variant(variant: str):
    """
    –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
    
    Usage –≤ –∫–æ–Ω—Å–æ–ª–∏:
        from chat.ai.experiment_manager import set_force_variant
        set_force_variant('structured')  # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã ‚Üí structured
    """
    global _experiment_manager
    
    if variant not in ExperimentManager.VARIANTS:
        raise ValueError(f"Unknown variant: {variant}. Available: {list(ExperimentManager.VARIANTS.keys())}")
    
    _experiment_manager = ExperimentManager(force_variant=variant)
    logger.info(f"üß™ Force variant set to: {variant}")
    print(f"‚úÖ All chats will now use variant: {variant}")

