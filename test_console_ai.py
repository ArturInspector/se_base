#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-–±–æ—Ç–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
"""
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'se_base'))

import logging
from pathlib import Path
from typing import List, Dict
from datetime import datetime
from chat.ai.simple_processor import SimpleAIProcessor
from chat.models import AvitoMessageModel, AvitoMessagePayload, AvitoMessageValue, AvitoMessageContent
import time

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)


class ScenarioParser:
    """–ü–∞—Ä—Å–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def extract_city_from_scenario_name(name: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        city_patterns = [
            r'\((.*?)\)',  # –í —Å–∫–æ–±–∫–∞—Ö: (–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É)
            r'–≥\.?\s+([–ê-–Ø–∞-—è—ë–Å\-]+)',  # –≥. –ú–æ—Å–∫–≤–∞
            r'–≥–æ—Ä–æ–¥\s+([–ê-–Ø–∞-—è—ë–Å\-]+)',  # –≥–æ—Ä–æ–¥ –ö–∞–∑–∞–Ω—å
        ]
        
        for pattern in city_patterns:
            match = re.search(pattern, name)
            if match:
                city = match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
                city = re.sub(r'–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å|–∫—Ä–∞–π|—Ä–µ—Å–ø\.|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '', city).strip()
                city = city.split(',')[0].strip()  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ –∑–∞–ø—è—Ç–æ–π
                if city and len(city) > 2:
                    return city
        
        return None
    
    @staticmethod
    def parse_file(file_path: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        
        –§–æ—Ä–º–∞—Ç:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            USER: —Å–æ–æ–±—â–µ–Ω–∏–µ
            BOT: –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            USER: —Å–ª–µ–¥—É—é—â–µ–µ
            ---
            # –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
        """
        scenarios = []
        current_scenario = None
        
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.rstrip()
                
                # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not line:
                    continue
                
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                if line.strip() == '---':
                    if current_scenario and current_scenario['messages']:
                        scenarios.append(current_scenario)
                    current_scenario = None
                    continue
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                if line.startswith('#'):
                    if current_scenario and current_scenario['messages']:
                        scenarios.append(current_scenario)
                    scenario_name = line[1:].strip()
                    current_scenario = {
                        'name': scenario_name,
                        'city': ScenarioParser.extract_city_from_scenario_name(scenario_name),
                        'messages': []
                    }
                    continue
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if line.startswith('USER:') or line.startswith('–ö–ª–∏–µ–Ω—Ç:'):
                    if not current_scenario:
                        current_scenario = {'name': 'Unnamed', 'messages': []}
                    
                    text = line.split(':', 1)[1].strip()
                    if text:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
                        current_scenario['messages'].append({
                            'role': 'user',
                            'text': text
                        })
                
                # –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
                elif line.startswith('BOT:') or line.startswith('–ë–æ—Ç:'):
                    if not current_scenario:
                        continue
                    
                    text = line.split(':', 1)[1].strip()
                    if text:
                        current_scenario['messages'].append({
                            'role': 'bot',
                            'expected': text
                        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        if current_scenario and current_scenario['messages']:
            scenarios.append(current_scenario)
        
        return scenarios


class DialogueLogger:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    
    def __init__(self, log_dir: str = "test_logs"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        self.current_session_file = None
        self.start_new_session()
    
    def start_new_session(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.current_session_file = self.log_dir / f"session_{timestamp}.txt"
        
        with open(self.current_session_file, 'w', encoding='utf-8') as f:
            f.write(f"=== –¢–ï–°–¢–û–í–ê–Ø –°–ï–°–°–ò–Ø {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
    
    def log_message(self, role: str, message: str, metadata: dict = None):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        if not self.current_session_file:
            return
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write(f"[{timestamp}] {role}:\n")
            f.write(f"{message}\n")
            
            if metadata:
                f.write(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}\n")
            
            f.write("\n" + "-" * 80 + "\n\n")
    
    def log_scenario_start(self, scenario_name: str):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        if not self.current_session_file:
            return
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write("\n" + "=" * 80 + "\n")
            f.write(f"–°–¶–ï–ù–ê–†–ò–ô: {scenario_name}\n")
            f.write("=" * 80 + "\n\n")
    
    def log_scenario_end(self, results: dict = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        if not self.current_session_file:
            return
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write("\n" + "~" * 80 + "\n")
            if results:
                f.write(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {results}\n")
            f.write("~" * 80 + "\n\n")


class ConsoleAITester:
    def __init__(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ (Simple Processor)")
        self.processor = SimpleAIProcessor()
        self.test_chat_id = "test_console_chat_001"
        self.test_user_id = 999999
        self.ad_data = self._prepare_test_ad_data(None)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –≥–æ—Ä–æ–¥–∞
        
        # ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ‚Üí disclaimer –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        logger.info(f"‚úÖ SimpleAIProcessor initialized for chat_id: {self.test_chat_id}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
        self.dialogue_logger = DialogueLogger()
        logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {self.dialogue_logger.current_session_file}")
        logger.info("‚úÖ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: AI-over-AI with Context Analyzer")
        
    def _prepare_test_ad_data(self, city: str = None) -> dict:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
        Args:
            city: –ì–æ—Ä–æ–¥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ï—Å–ª–∏ None - –±–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        """
        if city:
            return {
                'url': f'https://www.avito.ru/{city}/predlozheniya_uslug/gruzchiki_test',
                'determined_city': city,
                'city_from_api': city,
                'item_id': 12345678
            }
        else:
            # –ë–µ–∑ –≥–æ—Ä–æ–¥–∞ - –±–æ—Ç —Å–∞–º –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–æ—Å–∏—Ç—å/–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            return {
                'url': 'https://www.avito.ru/predlozheniya_uslug/gruzchiki_test',
                'item_id': 12345678
            }
    
    def _create_mock_avito_message(self, message: str) -> AvitoMessageModel:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ mock AvitoMessageModel –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Mock AvitoMessageModel –¥–ª—è chats_log
        """
        message_id = f"test_msg_{int(time.time() * 1000)}"
        
        return AvitoMessageModel(
            id=message_id,
            version="1.0",
            timestamp=int(time.time()),
            payload=AvitoMessagePayload(
                type='message',
                value=AvitoMessageValue(
                    id=message_id,
                    chat_id=self.test_chat_id,
                    user_id=self.test_user_id,
                    author_id=self.test_user_id,
                    created=int(time.time()),
                    type='text',
                    chat_type='u2i',
                    item_id=self.ad_data.get('item_id'),
                    content=AvitoMessageContent(text=message)
                )
            )
        )
    
    def print_separator(self, char="-", width=80):
        """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        print(char * width)
    
    def print_header(self, text: str):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        self.print_separator("=")
        print(f" {text}")
        self.print_separator("=")
    
    def display_context(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
        context = self.processor.context_manager.get_context(self.test_chat_id)
        
        if not context:
            print("üì≠ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
            return
        
        print(f"\nüìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ({len(context)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
        self.print_separator()
        for idx, msg in enumerate(context, 1):
            role = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg.get('is_user') else "ü§ñ –ë–æ—Ç"
            message_text = msg.get('message', '')
            print(f"{idx}. {role}: {message_text[:100]}...")
        self.print_separator()
    
    def process_user_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.print_separator()
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        self.dialogue_logger.log_message("–ö–õ–ò–ï–ù–¢", message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock AvitoMessageModel –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            mock_model = self._create_mock_avito_message(message)
            
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            response, metadata = self.processor.process(
                message=message,
                chat_id=self.test_chat_id,
                ad_data=self.ad_data,
                avito_message_model=mock_model,
                return_metadata=True
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if metadata:
                if metadata.get('customer_type'):
                    confidence = metadata.get('customer_type_confidence', 0)
                    print(f"\n üìä –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {metadata['customer_type']} (confidence: {confidence:.2f})")
                if metadata.get('action'):
                    print(f"   ‚îî‚îÄ –î–µ–π—Å—Ç–≤–∏–µ: {metadata['action']}")
                if metadata.get('template_id'):
                    print(f"   ‚îî‚îÄ –®–∞–±–ª–æ–Ω: {metadata['template_id']}")
            
            print(f"\nü§ñ –ë–æ—Ç: {response}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            self.dialogue_logger.log_message("–ë–û–¢", response, metadata)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            print(error_msg)
            self.dialogue_logger.log_message("–û–®–ò–ë–ö–ê", str(e))
    
    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.print_header("üöÄ –¢–ï–°–¢–û–í–´–ô –ö–û–ù–°–û–õ–¨–ù–´–ô AI-–ë–û–¢ | Simple Processor")
        print("""
üìã –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
  ‚úÖ One AI Call ‚Üí Structured JSON
  ‚úÖ Business Rules ‚Üí Deterministic Logic
  ‚úÖ Templates ‚Üí No Hallucinations

–ö–æ–º–∞–Ω–¥—ã:
  - –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É
  - /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  - /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  - /test - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
  - /run <—Ñ–∞–π–ª> - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
  - /exit –∏–ª–∏ /quit - –≤—ã—Ö–æ–¥
        """)
        self.print_separator()
        
        while True:
            try:
                user_input = input("\n>>> ").strip()
                
                if not user_input:
                    continue
                
                if user_input.lower() in ['/exit', '/quit', 'exit', 'quit']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if user_input.lower() == '/history':
                    self.display_context()
                    continue
                
                if user_input.lower() == '/clear':
                    self.processor.context_manager.clear_old_contexts()
                    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
                    continue
                
                if user_input.lower() == '/test':
                    self.run_test_scenario()
                    continue
                
                if user_input.lower().startswith('/run'):
                    parts = user_input.split(maxsplit=1)
                    if len(parts) < 2:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: /run <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
                        print("   –ü—Ä–∏–º–µ—Ä: /run test_scenarios/example_scenario.txt")
                        print("   –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: /run example_scenario.txt")
                    else:
                        self.run_scenarios_from_file(parts[1])
                    continue
                
                self.process_user_message(user_input)
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    def run_test_scenario(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.print_header("üß™ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô")
        
        print("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ /stop\n")
        
        step = 1
        while True:
            try:
                message = input(f"[–®–∞–≥ {step}] >>> ").strip()
                
                if not message or message.lower() in ['/stop', '/exit']:
                    break
                
                self.process_user_message(message)
                step += 1
                print()
                
            except KeyboardInterrupt:
                print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
                break
        
        print("\n")
        self.display_context()
        self.print_header("‚úÖ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ó–ê–í–ï–†–®–ï–ù")
    
    def run_single_test(self, message: str):
        """–û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.print_header(f"–¢–ï–°–¢: {message}")
        self.process_user_message(message)
        self.print_separator()
    
    def run_scenarios_from_file(self, file_path: str):
        """–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
            if not os.path.exists(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ test_scenarios/
                alt_path = os.path.join(os.path.dirname(__file__), '..', 'test_scenarios', file_path)
                if os.path.exists(alt_path):
                    file_path = alt_path
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    return
            
            scenarios = ScenarioParser.parse_file(file_path)
            
            if not scenarios:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Ñ–∞–π–ª–µ {file_path}")
                return
            
            self.print_header(f"üìã –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–ï–í –ò–ó –§–ê–ô–õ–ê: {file_path}")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}\n")
            
            scenario_results = []
            
            for idx, scenario in enumerate(scenarios, 1):
                self.print_separator("=")
                print(f"üß™ –°–¶–ï–ù–ê–†–ò–ô #{idx}: {scenario['name']}")
                if scenario.get('city'):
                    print(f"   üìç –ì–æ—Ä–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∞: {scenario['city']}")
                self.print_separator("=")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                self.dialogue_logger.log_scenario_start(f"#{idx}: {scenario['name']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ad_data —Å –≥–æ—Ä–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                self.ad_data = self._prepare_test_ad_data(scenario.get('city'))
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
                self.processor.context_manager.clear_old_contexts()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                scenario_start_time = datetime.now()
                for msg_idx, message in enumerate(scenario['messages'], 1):
                    if message['role'] == 'user':
                        print(f"\n[{msg_idx}] ", end="")
                        self.process_user_message(message['text'])
                    elif message['role'] == 'bot':
                        # TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        pass
                
                scenario_duration = (datetime.now() - scenario_start_time).total_seconds()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
                result = {
                    'name': scenario['name'],
                    'duration': f"{scenario_duration:.2f}s",
                    'messages_count': len([m for m in scenario['messages'] if m['role'] == 'user'])
                }
                
                scenario_results.append(result)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                self.dialogue_logger.log_scenario_end(result)
                
                print("\n")
                if idx < len(scenarios):
                    response = input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
                    if response.lower() == 'q':
                        break
                    print()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.print_header("‚úÖ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´")
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            for idx, result in enumerate(scenario_results, 1):
                print(f"{idx}. {result['name']}")
                print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {result['messages_count']}")
                print()
            
            print(f"\nüìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {self.dialogue_logger.current_session_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}", exc_info=True)
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    if len(sys.argv) > 1:
        tester = ConsoleAITester()
        message = " ".join(sys.argv[1:])
        tester.run_single_test(message)
    else:
        tester = ConsoleAITester()
        tester.run_interactive()


if __name__ == "__main__":
    main()

