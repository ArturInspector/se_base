#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-–±–æ—Ç–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
"""
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'se_base'))

import logging
from pathlib import Path
from typing import List, Dict
from datetime import datetime
from chat.ai.base import AvitoAIProcessor
from chat.ai.fsm import DialogueStateMachine, get_metrics_collector

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)


class ScenarioParser:
    """–ü–∞—Ä—Å–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def extract_city_from_scenario_name(name: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        city_patterns = [
            r'\((.*?)\)',  # –í —Å–∫–æ–±–∫–∞—Ö: (–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É)
            r'–≥\.?\s+([–ê-–Ø–∞-—è—ë–Å\-]+)',  # –≥. –ú–æ—Å–∫–≤–∞
            r'–≥–æ—Ä–æ–¥\s+([–ê-–Ø–∞-—è—ë–Å\-]+)',  # –≥–æ—Ä–æ–¥ –ö–∞–∑–∞–Ω—å
        ]
        
        for pattern in city_patterns:
            match = re.search(pattern, name)
            if match:
                city = match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
                city = re.sub(r'–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å|–∫—Ä–∞–π|—Ä–µ—Å–ø\.|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '', city).strip()
                city = city.split(',')[0].strip()  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ –∑–∞–ø—è—Ç–æ–π
                if city and len(city) > 2:
                    return city
        
        return None
    
    @staticmethod
    def parse_file(file_path: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        
        –§–æ—Ä–º–∞—Ç:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            USER: —Å–æ–æ–±—â–µ–Ω–∏–µ
            BOT: –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            USER: —Å–ª–µ–¥—É—é—â–µ–µ
            ---
            # –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
        """
        scenarios = []
        current_scenario = None
        
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.rstrip()
                
                # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not line:
                    continue
                
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                if line.strip() == '---':
                    if current_scenario and current_scenario['messages']:
                        scenarios.append(current_scenario)
                    current_scenario = None
                    continue
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                if line.startswith('#'):
                    if current_scenario and current_scenario['messages']:
                        scenarios.append(current_scenario)
                    scenario_name = line[1:].strip()
                    current_scenario = {
                        'name': scenario_name,
                        'city': ScenarioParser.extract_city_from_scenario_name(scenario_name),
                        'messages': []
                    }
                    continue
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if line.startswith('USER:') or line.startswith('–ö–ª–∏–µ–Ω—Ç:'):
                    if not current_scenario:
                        current_scenario = {'name': 'Unnamed', 'messages': []}
                    
                    text = line.split(':', 1)[1].strip()
                    if text:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
                        current_scenario['messages'].append({
                            'role': 'user',
                            'text': text
                        })
                
                # –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
                elif line.startswith('BOT:') or line.startswith('–ë–æ—Ç:'):
                    if not current_scenario:
                        continue
                    
                    text = line.split(':', 1)[1].strip()
                    if text:
                        current_scenario['messages'].append({
                            'role': 'bot',
                            'expected': text
                        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        if current_scenario and current_scenario['messages']:
            scenarios.append(current_scenario)
        
        return scenarios


class DialogueLogger:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    
    def __init__(self, log_dir: str = "test_logs"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        self.current_session_file = None
        self.start_new_session()
    
    def start_new_session(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.current_session_file = self.log_dir / f"session_{timestamp}.txt"
        
        with open(self.current_session_file, 'w', encoding='utf-8') as f:
            f.write(f"=== –¢–ï–°–¢–û–í–ê–Ø –°–ï–°–°–ò–Ø {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
    
    def log_message(self, role: str, message: str, metadata: dict = None):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        if not self.current_session_file:
            return
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write(f"[{timestamp}] {role}:\n")
            f.write(f"{message}\n")
            
            if metadata:
                f.write(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}\n")
            
            f.write("\n" + "-" * 80 + "\n\n")
    
    def log_scenario_start(self, scenario_name: str):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        if not self.current_session_file:
            return
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write("\n" + "=" * 80 + "\n")
            f.write(f"–°–¶–ï–ù–ê–†–ò–ô: {scenario_name}\n")
            f.write("=" * 80 + "\n\n")
    
    def log_scenario_end(self, results: dict = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        if not self.current_session_file:
            return
        
        with open(self.current_session_file, 'a', encoding='utf-8') as f:
            f.write("\n" + "~" * 80 + "\n")
            if results:
                f.write(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {results}\n")
            f.write("~" * 80 + "\n\n")


class ConsoleAITester:
    def __init__(self, use_functions: bool = True, use_fsm: bool = False):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞")
        self.processor = AvitoAIProcessor()
        self.processor.context_manager.use_db = False
        self.test_chat_id = "test_console_chat_001"
        self.test_user_id = 999999
        self.ad_data = self._prepare_test_ad_data(None)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –≥–æ—Ä–æ–¥–∞
        self.use_functions = use_functions
        self.use_fsm = use_fsm
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
        self.dialogue_logger = DialogueLogger()
        logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {self.dialogue_logger.current_session_file}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FSM –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.use_fsm:
            self.fsm = DialogueStateMachine(self.processor)
            logger.info("FSM —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω ‚úÖ")
        else:
            self.fsm = None
        
        logger.info(f"Function Calling: {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if use_functions else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}")
        logger.info(f"FSM —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if use_fsm else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}")
        
    def _prepare_test_ad_data(self, city: str = None) -> dict:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
        Args:
            city: –ì–æ—Ä–æ–¥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ï—Å–ª–∏ None - –±–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        """
        if city:
            return {
                'url': f'https://www.avito.ru/{city}/predlozheniya_uslug/gruzchiki_test',
                'determined_city': city,
                'city_from_api': city,
                'item_id': 12345678
            }
        else:
            # –ë–µ–∑ –≥–æ—Ä–æ–¥–∞ - –±–æ—Ç —Å–∞–º –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–æ—Å–∏—Ç—å/–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            return {
                'url': 'https://www.avito.ru/predlozheniya_uslug/gruzchiki_test',
                'item_id': 12345678
            }
    
    def print_separator(self, char="-", width=80):
        """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        print(char * width)
    
    def print_header(self, text: str):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        self.print_separator("=")
        print(f" {text}")
        self.print_separator("=")
    
    def display_context(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
        context = self.processor.context_manager.get_context(self.test_chat_id)
        
        if not context:
            print("üì≠ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
            return
        
        print(f"\nüìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ({len(context)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
        self.print_separator()
        for idx, msg in enumerate(context, 1):
            role = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['is_user'] else "ü§ñ –ë–æ—Ç"
            print(f"{idx}. {role}: {msg['message'][:100]}...")
        self.print_separator()
    
    def process_user_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.print_separator()
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        self.dialogue_logger.log_message("–ö–õ–ò–ï–ù–¢", message)
        
        try:
            metadata = {}
            
            # FSM —Ä–µ–∂–∏–º
            if self.use_fsm:
                response = self.fsm.process_message(
                    message=message,
                    chat_id=self.test_chat_id,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
                context_info = self.fsm.get_context_info(self.test_chat_id)
                print(f"\n FSM State: {context_info.get('state', 'unknown')}")
                if context_info.get('city'):
                    print(f"   ‚îî‚îÄ –ì–æ—Ä–æ–¥: {context_info['city']}")
                if context_info.get('people'):
                    print(f"   ‚îî‚îÄ –ì—Ä—É–∑—á–∏–∫–æ–≤: {context_info['people']}")
                if context_info.get('hours'):
                    print(f"   ‚îî‚îÄ –ß–∞—Å–æ–≤: {context_info['hours']}")
                
                metadata = {
                    'mode': 'FSM',
                    'state': context_info.get('state', 'unknown'),
                    'city': context_info.get('city'),
                    'people': context_info.get('people'),
                    'hours': context_info.get('hours'),
                    'phone': context_info.get('phone')
                }
            
            # –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º (–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
            elif self.use_functions:
                response = self.processor.process_with_functions(
                    message=message,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data,
                    chat_id=self.test_chat_id,
                    use_functions=True
                )
                metadata = {'mode': 'Functions'}
            else:
                response = self.processor.process_message(
                    message=message,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data,
                    chat_id=self.test_chat_id
                )
                metadata = {'mode': 'Simple'}
            
            print(f"\nü§ñ –ë–æ—Ç: {response}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            self.dialogue_logger.log_message("–ë–û–¢", response, metadata)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            print(error_msg)
            self.dialogue_logger.log_message("–û–®–ò–ë–ö–ê", str(e))
    
    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        func_status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù" if self.use_functions else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù"
        fsm_status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù" if self.use_fsm else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù"
        self.print_header(f"üöÄ –¢–ï–°–¢–û–í–´–ô –ö–û–ù–°–û–õ–¨–ù–´–ô AI-–ë–û–¢ | FSM: {fsm_status} | Function Calling: {func_status}")
        print("""
–ö–æ–º–∞–Ω–¥—ã:
  - –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É
  - /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  - /state - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
  - /metrics - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (FSM)
  - /funcmetrics - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π (reliability)
  - /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  - /test - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
  - /testfunc - —Ç–µ—Å—Ç —Å function calling (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏)
  - /testparsing - –ü–û–õ–ù–´–ô –¢–ï–°–¢ OpenAI Function Calling (API Parsing)
  - /run <—Ñ–∞–π–ª> - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
  - /toggle - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å function calling
  - /togglefsm - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å FSM —Ä–µ–∂–∏–º
  - /exit –∏–ª–∏ /quit - –≤—ã—Ö–æ–¥
        """)
        self.print_separator()
        
        while True:
            try:
                user_input = input("\n>>> ").strip()
                
                if not user_input:
                    continue
                
                if user_input.lower() in ['/exit', '/quit', 'exit', 'quit']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if user_input.lower() == '/history':
                    self.display_context()
                    continue
                
                if user_input.lower() == '/clear':
                    self.processor.context_manager.clear_old_contexts()
                    if self.use_fsm and self.fsm:
                        # –û—á–∏—â–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if self.test_chat_id in self.fsm._contexts:
                            del self.fsm._contexts[self.test_chat_id]
                        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω—ã")
                    else:
                        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
                    continue
                
                if user_input.lower() == '/test':
                    self.run_test_scenario()
                    continue
                
                if user_input.lower() == '/testfunc':
                    self.run_function_test()
                    continue
                
                if user_input.lower() == '/testparsing':
                    self.run_openai_parsing_test()
                    continue
                
                if user_input.lower() == '/toggle':
                    self.use_functions = not self.use_functions
                    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if self.use_functions else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
                    print(f"Function Calling —Ç–µ–ø–µ—Ä—å {status}")
                    continue
                
                if user_input.lower() == '/togglefsm':
                    self.use_fsm = not self.use_fsm
                    if self.use_fsm and not self.fsm:
                        self.fsm = DialogueStateMachine(self.processor)
                    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if self.use_fsm else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
                    print(f"FSM —Ä–µ–∂–∏–º —Ç–µ–ø–µ—Ä—å {status}")
                    continue
                
                if user_input.lower() == '/state':
                    if self.use_fsm and self.fsm:
                        context_info = self.fsm.get_context_info(self.test_chat_id)
                        print("\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï FSM:")
                        print(f"  State: {context_info.get('state', 'unknown')}")
                        print(f"  –ì–æ—Ä–æ–¥: {context_info.get('city', '‚ùå')}")
                        print(f"  –ì—Ä—É–∑—á–∏–∫–æ–≤: {context_info.get('people', '‚ùå')}")
                        print(f"  –ß–∞—Å–æ–≤: {context_info.get('hours', '‚ùå')}")
                        print(f"  –¢–µ–ª–µ—Ñ–æ–Ω: {context_info.get('phone', '‚ùå')}")
                        print(f"  –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {context_info.get('intent', '‚ùå')}")
                        print(f"  –Æ—Ä–ª–∏—Ü–æ: {context_info.get('is_legal', '‚ùå')}")
                    else:
                        print("FSM —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")
                    continue
                
                if user_input.lower() == '/metrics':
                    if self.use_fsm:
                        metrics = get_metrics_collector()
                        metrics.print_report()
                    else:
                        print("FSM —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω (–º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
                    continue
                
                if user_input.lower() == '/funcmetrics':
                    from chat.ai.reliability import get_metrics
                    metrics = get_metrics()
                    metrics.print_report()
                    continue
                
                if user_input.lower().startswith('/run'):
                    parts = user_input.split(maxsplit=1)
                    if len(parts) < 2:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: /run <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
                        print("   –ü—Ä–∏–º–µ—Ä: /run test_scenarios/example_scenario.txt")
                        print("   –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: /run example_scenario.txt")
                    else:
                        self.run_scenarios_from_file(parts[1])
                    continue
                
                self.process_user_message(user_input)
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    def run_test_scenario(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.print_header("üß™ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô")
        
        print("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ /stop\n")
        
        step = 1
        while True:
            try:
                message = input(f"[–®–∞–≥ {step}] >>> ").strip()
                
                if not message or message.lower() in ['/stop', '/exit']:
                    break
                
                self.process_user_message(message)
                step += 1
                print()
                
            except KeyboardInterrupt:
                print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
                break
        
        print("\n")
        self.display_context()
        self.print_header("‚úÖ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ó–ê–í–ï–†–®–ï–ù")
    
    def run_function_test(self):
        """–¢–µ—Å—Ç Function Calling - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ"""
        self.print_header("üîß –¢–ï–°–¢ FUNCTION CALLING")
        
        print("""
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É OpenAI Function Calling.
AI –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é create_bitrix_deal
–∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        """)
        self.print_separator()
        
        test_messages = [
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω—É–∂–Ω–æ 2 –≥—Ä—É–∑—á–∏–∫–∞ –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ 4 —á–∞—Å–∞",
            "–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +7 999 888 77 66"
        ]
        
        print("\n[–®–∞–≥ 1/2] –ö–ª–∏–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É")
        self.process_user_message(test_messages[0])
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        print("\n[–®–∞–≥ 2/2] –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω")
        print("‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º —á—Ç–æ AI –≤—ã–∑–æ–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é create_bitrix_deal")
        self.process_user_message(test_messages[1])
        
        print("\n")
        self.print_separator()
        print("\n‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–µ–ª–∏ –ª–æ–≥–∏ '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: create_bitrix_deal' - —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª!")
        print("‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24")
        self.print_header("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    
    def run_single_test(self, message: str):
        """–û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.print_header(f"–¢–ï–°–¢: {message}")
        self.process_user_message(message)
        self.print_separator()
    
    def run_openai_parsing_test(self):
        """
        –¢–µ—Å—Ç OpenAI Function Calling (—Ç—Ä–µ—Ç–∏–π –ø–æ–¥—Ö–æ–¥ - API Parsing)
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π AI
        2. –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
        3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ —á–µ—Ä–µ–∑ function calling
        4. –†–∞—Å—á–µ—Ç —Ü–µ–Ω —á–µ—Ä–µ–∑ functions
        5. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ fallback
        """
        self.print_header("üî¨ –¢–ï–°–¢ OPENAI FUNCTION CALLING (API PARSING)")
        
        print("""
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ—Ç–∏–π –ø–æ–¥—Ö–æ–¥ - OpenAI Function Calling.
AI –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
  - get_city_pricing - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞
  - calculate_price_estimate - —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
  - create_bitrix_deal - —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24
  - create_bitrix_deal_legal - —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –¥–ª—è —é—Ä–ª–∏—Ü–∞

üìã –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∞:
  [1] –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ function calling
  [2] –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Ñ–∏–∑–ª–∏—Ü–∞
  [3] –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —é—Ä–ª–∏—Ü–∞
  [4] –¢–µ—Å—Ç fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
        """)
        self.print_separator()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        original_use_functions = self.use_functions
        original_use_fsm = self.use_fsm
        
        # –í–∫–ª—é—á–∞–µ–º function calling, –≤—ã–∫–ª—é—á–∞–µ–º FSM
        self.use_functions = True
        self.use_fsm = False
        self.fsm = None
        
        test_results = []
        
        try:
            # === –¢–ï–°–¢ 1: –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ function calling ===
            print("\n" + "="*80)
            print("[–¢–ï–°–¢ 1/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã")
            print("="*80 + "\n")
            
            self.processor.context_manager.clear_old_contexts()
            
            test_messages_pricing = [
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏ –≤ –ú–æ—Å–∫–≤–µ",
                "–ù–∞ 4 —á–∞—Å–∞, 2 —á–µ–ª–æ–≤–µ–∫–∞"
            ]
            
            print("–û–∂–∏–¥–∞–µ–º —á—Ç–æ AI –≤—ã–∑–æ–≤–µ—Ç: get_city_pricing –∏–ª–∏ calculate_price_estimate\n")
            
            for msg in test_messages_pricing:
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {msg}")
                response = self.processor.process_with_functions(
                    message=msg,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data,
                    chat_id=self.test_chat_id,
                    use_functions=True
                )
                print(f"ü§ñ –ë–æ—Ç: {response}\n")
            
            test_results.append({
                "test": "–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ functions",
                "status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
                "note": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: get_city_pricing'"
            })
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # === –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Ñ–∏–∑–ª–∏—Ü–∞ ===
            print("\n" + "="*80)
            print("[–¢–ï–°–¢ 2/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ñ–∏–∑–ª–∏—Ü–∞")
            print("="*80 + "\n")
            
            self.processor.context_manager.clear_old_contexts()
            
            test_messages_deal = [
                "–ù—É–∂–Ω–æ 3 –≥—Ä—É–∑—á–∏–∫–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –Ω–∞ 5 —á–∞—Å–æ–≤",
                "–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +7 999 123 45 67"
            ]
            
            print("–û–∂–∏–¥–∞–µ–º —á—Ç–æ AI –≤—ã–∑–æ–≤–µ—Ç: create_bitrix_deal\n")
            
            for msg in test_messages_deal:
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {msg}")
                response = self.processor.process_with_functions(
                    message=msg,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data,
                    chat_id=self.test_chat_id,
                    use_functions=True
                )
                print(f"ü§ñ –ë–æ—Ç: {response}\n")
            
            test_results.append({
                "test": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Ñ–∏–∑–ª–∏—Ü–∞",
                "status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
                "note": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: create_bitrix_deal'"
            })
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # === –¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —é—Ä–ª–∏—Ü–∞ ===
            print("\n" + "="*80)
            print("[–¢–ï–°–¢ 3/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è —é—Ä–ª–∏—Ü–∞")
            print("="*80 + "\n")
            
            self.processor.context_manager.clear_old_contexts()
            
            test_messages_legal = [
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞–º –Ω—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏ –¥–ª—è –æ—Ñ–∏—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–µ–∑–¥–∞ –≤ –ö–∞–∑–∞–Ω–∏",
                "–ù—É–∂–Ω–æ –æ–ø–ª–∞—Ç—É –ø–æ —Å—á–µ—Ç—É –∏ –¥–æ–≥–æ–≤–æ—Ä —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 888 77 66, –∫–æ–º–ø–∞–Ω–∏—è –û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞"
            ]
            
            print("–û–∂–∏–¥–∞–µ–º —á—Ç–æ AI –≤—ã–∑–æ–≤–µ—Ç: create_bitrix_deal_legal\n")
            
            for msg in test_messages_legal:
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {msg}")
                response = self.processor.process_with_functions(
                    message=msg,
                    user_id=self.test_user_id,
                    ad_data=self.ad_data,
                    chat_id=self.test_chat_id,
                    use_functions=True
                )
                print(f"ü§ñ –ë–æ—Ç: {response}\n")
            
            test_results.append({
                "test": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —é—Ä–ª–∏—Ü–∞",
                "status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
                "note": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: create_bitrix_deal_legal'"
            })
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # === –¢–ï–°–¢ 4: Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ ===
            print("\n" + "="*80)
            print("[–¢–ï–°–¢ 4/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞")
            print("="*80 + "\n")
            
            self.processor.context_manager.clear_old_contexts()
            
            print("–°–∏–º—É–ª—è—Ü–∏—è: OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞)\n")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º OpenAI
            original_openai_state = self.processor.use_openai
            self.processor.use_openai = False
            
            test_message_fallback = "–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 777 66 55, –Ω—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏"
            
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {test_message_fallback}")
            response = self.processor.process_with_functions(
                message=test_message_fallback,
                user_id=self.test_user_id,
                ad_data=self.ad_data,
                chat_id=self.test_chat_id,
                use_functions=True
            )
            print(f"ü§ñ –ë–æ—Ç (Fallback): {response}\n")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenAI
            self.processor.use_openai = original_openai_state
            
            test_results.append({
                "test": "Fallback –º–µ—Ö–∞–Ω–∏–∑–º",
                "status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
                "note": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å —á–µ—Ä–µ–∑ fallback"
            })
            
            # === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===
            print("\n")
            self.print_header("‚úÖ –¢–ï–°–¢–´ OPENAI FUNCTION CALLING –ó–ê–í–ï–†–®–ï–ù–´")
            
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:\n")
            for idx, result in enumerate(test_results, 1):
                print(f"{idx}. {result['test']}: {result['status']}")
                print(f"   ‚îî‚îÄ {result['note']}\n")
            
            print("\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
            print("  ‚úÖ AI –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö)")
            print("  ‚úÖ –°–¥–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ")
            print("  ‚úÖ –¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("  ‚úÖ Fallback –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
            
            print("\n‚ö†Ô∏è  PRODUCTION READINESS:")
            print("  ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ß–∏—Å—Ç–∞—è, SOLID-compliant")
            print("  ‚úÖ Error Handling: –ï—Å—Ç—å fallback –∏ alerts")
            print("  ‚úÖ Logging: Comprehensive logging")
            print("  ‚ö†Ô∏è  Retry Logic: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)")
            print("  ‚ö†Ô∏è  Rate Limiting: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            print("  ‚ö†Ô∏è  Async: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ)")
            print("  ‚ö†Ô∏è  Monitoring: –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π")
            
            print("\nüí° –í–ù–ï–î–†–ï–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø (1 —á–∞—Å):")
            print("  ‚úÖ 1. Retry —Å exponential backoff –¥–ª—è Bitrix API (3 –ø–æ–ø—ã—Ç–∫–∏)")
            print("  ‚úÖ 2. Circuit breaker pattern –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤")
            print("  ‚úÖ 3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ get_city_pricing (TTL 1 —á–∞—Å)")
            print("  ‚úÖ 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π (success rate, latency)")
            print("  ‚úÖ 5. Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bitrix")
            
            print("\nüìä –ö–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏:")
            print("  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /funcmetrics –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            print("\n‚è≠Ô∏è  –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):")
            print("  ‚Ä¢ Rate limiting –¥–ª—è OpenAI API")
            print("  ‚Ä¢ Async/await –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤")
            print("  ‚Ä¢ Dead letter queue –¥–ª—è failed deals")
            print("  ‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ OpenAI Function Calling: {e}", exc_info=True)
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            import traceback
            print(traceback.format_exc())
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.use_functions = original_use_functions
            self.use_fsm = original_use_fsm
            if self.use_fsm:
                self.fsm = DialogueStateMachine(self.processor)
        
        self.print_separator()
    
    def run_scenarios_from_file(self, file_path: str):
        """–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
            if not os.path.exists(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ test_scenarios/
                alt_path = os.path.join(os.path.dirname(__file__), '..', 'test_scenarios', file_path)
                if os.path.exists(alt_path):
                    file_path = alt_path
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    return
            
            scenarios = ScenarioParser.parse_file(file_path)
            
            if not scenarios:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Ñ–∞–π–ª–µ {file_path}")
                return
            
            self.print_header(f"üìã –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–ï–í –ò–ó –§–ê–ô–õ–ê: {file_path}")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}\n")
            
            scenario_results = []
            
            for idx, scenario in enumerate(scenarios, 1):
                self.print_separator("=")
                print(f"üß™ –°–¶–ï–ù–ê–†–ò–ô #{idx}: {scenario['name']}")
                if scenario.get('city'):
                    print(f"   üìç –ì–æ—Ä–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∞: {scenario['city']}")
                self.print_separator("=")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                self.dialogue_logger.log_scenario_start(f"#{idx}: {scenario['name']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ad_data —Å –≥–æ—Ä–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                self.ad_data = self._prepare_test_ad_data(scenario.get('city'))
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
                self.processor.context_manager.clear_old_contexts()
                if self.use_fsm and self.fsm:
                    if self.test_chat_id in self.fsm._contexts:
                        del self.fsm._contexts[self.test_chat_id]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                scenario_start_time = datetime.now()
                for msg_idx, message in enumerate(scenario['messages'], 1):
                    if message['role'] == 'user':
                        print(f"\n[{msg_idx}] ", end="")
                        self.process_user_message(message['text'])
                    elif message['role'] == 'bot':
                        # TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        pass
                
                scenario_duration = (datetime.now() - scenario_start_time).total_seconds()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
                result = {
                    'name': scenario['name'],
                    'duration': f"{scenario_duration:.2f}s",
                    'messages_count': len([m for m in scenario['messages'] if m['role'] == 'user'])
                }
                
                if self.use_fsm and self.fsm:
                    context_info = self.fsm.get_context_info(self.test_chat_id)
                    result['final_state'] = context_info.get('state', 'unknown')
                    result['phone_collected'] = bool(context_info.get('phone'))
                
                scenario_results.append(result)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                self.dialogue_logger.log_scenario_end(result)
                
                print("\n")
                if idx < len(scenarios):
                    response = input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
                    if response.lower() == 'q':
                        break
                    print()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.print_header("‚úÖ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´")
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            for idx, result in enumerate(scenario_results, 1):
                print(f"{idx}. {result['name']}")
                print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {result['messages_count']}")
                if 'phone_collected' in result:
                    status = "‚úÖ" if result['phone_collected'] else "‚ùå"
                    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω: {status}")
                print()
            
            print(f"\nüìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {self.dialogue_logger.current_session_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}", exc_info=True)
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    use_fsm = '--fsm' in sys.argv or '-f' in sys.argv
    
    if len(sys.argv) > 1 and sys.argv[1] not in ['--fsm', '-f']:
        tester = ConsoleAITester(use_fsm=use_fsm)
        # –£–±–∏—Ä–∞–µ–º --fsm –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        args = [arg for arg in sys.argv[1:] if arg not in ['--fsm', '-f']]
        message = " ".join(args)
        tester.run_single_test(message)
    else:
        tester = ConsoleAITester(use_fsm=use_fsm)
        tester.run_interactive()


if __name__ == "__main__":
    main()

